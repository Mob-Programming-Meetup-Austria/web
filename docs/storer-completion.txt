
# def completable?(kata_ids)
#   ==there is no other kata whose id[0..5] matches kata_id
#
#   The idea is this will be used by the kata-id-generator
#   to ensure that only completable ids are used.
#   This in turn ensures that 6 digits will always be enough
#   to complete from.
#   This is needed because I am starting to get ids that are
#   the same to 6 digits. Eg on the storer node
#   $ docker exec -it cyber-dojo-storer bash
#   $$ cd /usr/src/cyber-dojo/katas/F8
#   $$ diff <(ls | cut -c0-4 | sort) <(ls | cut -c0-4 | sort | uniq)
#   Shows there ARE existing katas with ids
#   that are the same in their first 6 digits.
#   I need a script to check for that.
#   Note that only 6 digits of the id are shown so
#   if there is an overlap then 6 digits will NOT complete and
#   the person will not know what the remaining digits are.
#
#
#   A fast lookup for this requires more than just the
#   2/8 directory structure. It needs the first 6 digits
#   to hold an intermediate directory structure.
#
#     viz .../12/34567890/manifest.json
#     eg  .../12/3456/7890/manifest.json
#
#   Lots of dir structures are possible
#     eg  .../12/34/56/78/90/manifest.json
#   As long as you get 6 digits at a dir boundary.
#
#   I need to clone the storer disk and write a script that:
#     o) converts to a given directory structure
#     o) measures the speed of reading/writing
#     o) converts back to the original structure
#     Try at least
#       - 12/3456/7890/
#       - 12/34/56/7890
#
#   What read/writes does completion affect?
#     o) kata setup to find the kata-id
#     o) completion to allow a person in
#
#   This raises the question of why there are 10 digits!
#   In this scheme there will only ever be one kata below
#   /12/34/56/...
#   When changing the directory structure is it worth
#   thinking about only storing 6 digits?
#
#   6 hex digits is 16^6 == 16,777,216
#   which is not that many.
#   As more and more katas are created the time it will take
#   the kata-id-generator to find new katas will keep increasing.
#   Of course new kata ids could easily be pre-cached.
#
#   One possibility is to simply extend the character set.
#   It is hex at the moment.
#   I could add uppercase characters, possibly
#   excluding O (oh) confused with 0 (zero)
#   excluding I (eye) confused with 1 (one)
#      ABCDEFGHIJKLMNOPQRSTUVWXYZ
#   That would give 10+26-2-2 == 32 digits
#   32^6 ==  1,073,741,824
#   Just over 1 billion.
#
#   That in turn would increase the 2-digits combinations
#   from 16^2 == 256 to 32^2 == 1024
#
#   $irb
#   def hex_id
#     # drops      0 1                               I           O
#     charset = %w{    2 3 4 5 6 7 9 A B C D E F G H   J K L M N   P Q R S T U V W X Y Z }
#     (0..5).map{ charset.to_a[SecureRandom.random_number(charset.size)] }.join
#   end
#   c = {}
#   1000.times{r.each_char{|e| c[e]||=0; c[e] += 1 }}
#   {"M"=>205, "D"=>206, "Y"=>184, "G"=>190, "4"=>196, "9"=>201, "J"=>196,
#    "3"=>189, "N"=>219, "V"=>196, "T"=>177, "E"=>182, "K"=>183, "R"=>194,
#    "7"=>170, "Z"=>209, "W"=>186, "A"=>182, "6"=>193, "X"=>178, "C"=>186,
#    "P"=>204, "Q"=>202, "F"=>194, "H"=>183, "2"=>195
#   }
#
#   A directory structure such as 12/34/56/78/90
#   would complicate the completions() method a bit.
#   But not too much. Overlay the partial-id into the dir structure.
#   I dont think the completions() method is used by web
#   only in the Katas.each() method.
#   Does anything in turn use that?
#   Yes. It is used in tests to harvest all the kata ids.
#
#   When doing the upgrade I dont want to bring the server down.
#   And also I don't want to force smaller collections of katas
#   to have to upgrade. So storer will need to understand both the
#   the old and the new formats.
#
#   Is there an easier way to do this _dynamically_? Step by step?
#
#   First, change the kata-id generation to that above, with bigger charset.
#   I think that should just work.
#   It will generate dirs like .../katas/8K/78EXVPJ9/manifest.json
#   That will reduce the likelihood of clashes.
#   Hmmm, but it will never generate zero or one.
#   Maybe keep those in the charset?
#   34**2 == 1156
#   34**6 == 1,544,804,416
#   And use a font other than Impact which highlights the differences more?
#
#   Then look at changing the dir structure to make it much quicker
#   to tell if a kata-id is completable. Which will itself be less
#   important because it will be less likely anyway.
#
#   Of course I could use lowercase letters too...
#   0-9 a-z A-Z (-2-2)
#   10+26+26-2-2 == 58 (base58)
#   58**2 == 3,364
#   58**6 == 38,068,692,544
#   If I keep lowercase, I need to alter the text input JS to not
#   convert to uppercase.
#
#   There are 4 problems
#   1. extend the charset to make 6-digit clashes less likely
#   2. implement completable?
#         worth doing?
#   3. change directory structure
#         and while there, reduce kata-id size to 6?
#         if I do this I will need to allow 10 digit ids
#         which I truncate before use.
#   4. fix existing 6-digit clashes?
#
#   Fast implementation of 2 needs 3.
#   But slow implementation of 2 will only slow down setup.
#
#   When the kata-id is displayed I could also spell it out in small font below
#   eg
#         pvA5Tz
#         pappa-victor-ALPHA-five-TANGO-zulu
#
#   Maybe I can put a 'version.json' file at the base of the katas/ dir
#   and use that to determine what the data-structure is.
#   Or an env-var perhaps?
#
#   Dropping 0 and 1 is problematic because the StorerFake uses the
#   test_hex_id many of which contain 0 or 1.
#   Perhaps keep 01 but drop OI
#   That would give a 58 character alphabetic. See above
#
#   def hex_id
#     charset  = %w{ 0 1 2 3 4 5 6 7 8 9 }
#     # drops                        I           O
#     charset += %w{ A B C D E F G H   J K L M N   P Q R S T U V W X Y Z }
#     # drops                        i           o
#     charset += %w{ a b c d e f g h   j k l m n   p q r s t u v w x y z }
#     10.times.map{ charset.to_a[SecureRandom.random_number(charset.size)] }.join
#   end
#
#   Quick play generated 100,000 hex_ids above and I got 1 duplicate
#   so I really do need to check for exists? / completability.
#
#   - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#
#   Tweak kata-id generator in storer so lower L (lima) counts as invalid.
#
#   - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#   Note that to test the speed of 12/34/56/ vs 123/456
#   I don't need to convert _all_ the katas/ dirs.
#
#   For 123/456 I need to...
#     - create an empty root dir 123/
#          make sure all other root dirs exist (4096 total)
#     - create an empty dir for each sub dir
#          eg 12/38563344/
#          -> 123/856/
#     - then I can time accessing, eg
#          123/456/manifest.json
#
#   For 12/34/56 I need to...
#     - create an empty root dir 12/
#          make sure all other root dirs exist (256 total)
#     - create an empty dir for each sub-dir
#          eg 12/38563344/
#          -> 12/38/56/
#     - then I can time accessing eg
#          12/34/56/manifest.json
#
# end


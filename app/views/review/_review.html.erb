<script type="text/javascript"><!--
'use strict';
$(() => {

  const review = cd.review = {};

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // After refresh() has been called param also contains
  // param.events
  //   holds the traffic-lights and is used to program
  //   the traffic-light [<][<][>][>] navigator buttons.
  // param.prevAvatarId
  // param.nextAvatarId
  //   hold the kata-ids and used is used to program
  //   the avatar [<][>] navigator buttons.
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  let param = {
        version: "<%= @version %>",
             id: "<%= @id %>",
        groupId: "<%= @group_id %>",
    avatarIndex: "<%= @avatar_index %>",
       wasIndex: "<%= @was_index %>",
       nowIndex: "<%= @now_index %>",
       filename: "<%= @filename %>"
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const $kataPage = $('#kata-page');
  const $reviewPage = $('#review-page');

  const inTestPage = $kataPage.length !== 0;

  cd.setReviewData = (version, id, groupId, avatarIndex, wasIndex, nowIndex, filename) => {
    // Called only from app/views/kata/_traffic_lights.html.erb
    // The [resume] & [checkout] buttons are only shown on kata/edit. [1]
    param = {
          version:version,
               id:id,
          groupId:groupId,
      avatarIndex:avatarIndex,
         wasIndex:wasIndex,
         nowIndex:nowIndex,
         filename:filename
    };
    fadeIntoReviewPage();
    setupButton('resume', () => fadeIntoKataPage(() => { // [1]
      cd.kata.editor.refocus();
    }));
    setupButton('checkout', () => fadeIntoKataPage(() => { // [1]
      cd.checkout({ src_id:param.id, src_index:param.nowIndex });
    }));
    setCheckoutButtonTip();
    refresh();
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const fadeIntoReviewPage = () => {
    $kataPage.fadeOut('fast', () => {
      $reviewPage.fadeIn('fast');
    });
  };
  const fadeIntoKataPage = (onComplete) => {
    $reviewPage.fadeOut('fast', () => {
      $kataPage.fadeIn('fast', () => {
        onComplete();
      });
    });
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const moveToAvatar = (id) => {
    param.id = id;
    const index = review.inDiffMode() ? 1 : -1;
    review.moveToTrafficLight(index);
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  review.moveToTrafficLight = (index) => {
    const delta = review.inDiffMode() ? 1 : 0;
    param.nowIndex = index;
    param.wasIndex = index - delta;
    refresh();
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const refresh = () => {
    const reviewParams = {
           version: param.version,
                id: param.id,
          group_id: param.groupId,
         was_index: param.wasIndex,
         now_index: param.nowIndex,
          filename: param.filename
    };
    cd.waitSpinner.fadeIn('fast', () => {
      $.getJSON('/differ/diff', reviewParams, (data) => {
        cd.waitSpinner.fadeOut('fast', () => {
          param = data;
          refreshAvatarNavigator();
          refreshTrafficLights();  // this first
          refreshIndexNavigator(); // this second
          review.refreshDiffCheckBox(param);
          refreshFiles();
          review.refreshOutput(param);
          scrollCurrentTrafficLightIntoView();
          cd.setupHoverTips($('[data-tip]'));
        }); // waitSpinner
      }); // getJSON
    });
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const scrollCurrentTrafficLightIntoView = () => {
    // refreshTrafficLights() has updated the dom with a $('#traffic-light-marker')
    // I cannot find a nice way to access it once the dom is ready. So this :-(
    const quarterSecond = 250;
    const scroller = () => {
      $('#traffic-light-marker').scrollIntoView({
        direction:'horizontal',
        duration:'slow'
      });
    };
    setTimeout(scroller, quarterSecond);
  };

  //-----------------------------------------
  // [<]avatar[>]
  //-----------------------------------------

  const refreshAvatarNavigator = () => {
    if (param.avatarIndex != '') {
      $('#avatar-navigator').show();
      const $box = $('#review-avatar-image-box').html(makeAvatarImageHtml());
      refreshAvatar($('#prev-avatar'), param.prevAvatarId);
      cd.setupAvatarNameHoverTip($box, '', param.avatarIndex, '');
      refreshAvatar($('#next-avatar'), param.nextAvatarId);
    }
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const makeAvatarImageHtml = () => {
    return `<img class="avatar-image" src="/images/avatars/${param.avatarIndex}.jpg"/>`;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const refreshAvatar = (button, id) => {
    button
      .attr('disabled', id === '')
      .unbind('click')
      .bind('click', () => moveToAvatar(id));
  };

  //-----------------------------------------
  // [<][<]traffic-light-index[>][>]
  //-----------------------------------------

  const refreshIndexNavigator = () => {
    refreshIndex($('#first-index'),prevEventIndex(1));
    refreshIndex($('#prev-index'), prevEventIndex(param.nowIndex-1));
    $('#review-index-box').html(makeIndexHtml());
    refreshIndex($('#next-index'), nextEventIndex(param.nowIndex+1));
    refreshIndex($('#last-index'), nextEventIndex(param.events.length-1));
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const refreshIndex = (button, index) => {
    button
      .attr('disabled', index === null)
      .unbind('click')
      .bind('click', () => review.moveToTrafficLight(index));
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const prevEventIndex = (n) => {
    if (param.nowIndex === 1) { // 0 is creation event
      return null; // Disable
    } else {
      return n;
    }
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const nextEventIndex = (n) => {
    if (param.nowIndex === param.events.length-1) {
      return null; // Disable
    } else {
      return n;
    }
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const makeIndexHtml = () => {
    const index = param.nowIndex;
    const colour = param.events[index].colour;
    const number = $(`.diff-traffic-light[data-index=${index}]`).data('number');
    return `<div id="index-number" class="${colour}">${number}</div>`;
  };

  //-----------------------------------------
  // traffic-lights...
  //-----------------------------------------

  const refreshTrafficLights = () => {
    const trafficLights = $('#review-traffic-lights');
    trafficLights.html(makeTrafficLightsHtml());
    let wasIndex = 0;
    $.each($('.diff-traffic-light', trafficLights), (_, light) => {
      const $light = $(light);
      const nowIndex = $light.data('index');
      $light.click(() => review.moveToTrafficLight(nowIndex));
      cd.setupTrafficLightTip($light, param.id, wasIndex, nowIndex);
      wasIndex = nowIndex;
    });
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const makeTrafficLightsHtml = () => {
    let html = '';
    let number = 1;
    param.events.forEach(event => {
      if (isVisible(event)) {
        html += makeTrafficLightHtml(event, number);
        number += 1;
      }
    });
    return html;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const isVisible = (event) => {
    // Eg don't show event[0] == creation
    switch (event.colour) {
    case 'pulling':
    case 'red':
    case 'amber':
    case 'green':
    case 'timed_out':
    case 'faulty':
      return true;
    default:
      return false;
    }
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const makeTrafficLightHtml = (light, number) => {
    const colour = light.colour;
    return '' +
      `${makeRevertCircle(light)}
       ${makePredictCircle(light)}
       <div class="diff-traffic-light"
         data-id="${param.id}"
         data-avatar-index="${param.avatarIndex}"
         data-number="${number}"
         data-colour="${colour}"
         data-index="${light.index}">
         <img src="/images/traffic-light/${colour}.png"/>
        ${makeTrafficLightMarkerHtml(light)}
      </div>`;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const makeRevertCircle = (light) => {
    if (isRevert(light)) {
      return '<img class="revert" src="/images/traffic-light/circle-revert.png">';
    } else {
      return '';
    }
  };
  const isRevert = (light) => light.revert != undefined;

  const makePredictCircle = (light) => {
    if (isPredict(light)) {
      const correct = (light.predicted === light.colour);
      const icon = correct ? 'tick' : 'cross';
      return `<img class="${icon}" src="/images/traffic-light/circle-${icon}.png">`;
    } else {
      return '';
    }
  };
  const isPredict = (light) => light.predicted != undefined && light.predicted != 'none';

  const makeTrafficLightMarkerHtml = (light) => {
    const currentIndex = (param.nowIndex === light.index);
    if (currentIndex) {
      return `<img id='traffic-light-marker'
                   src='/images/traffic-light/marker_${light.colour}.png'/>`;
    } else {
      return '';
    }
  };

  //-----------------------------------------
  // files
  //-----------------------------------------

  const refreshFiles = () => {

    const diffContent = $('#diff-content');
    const diffFilenames = $('#diff-filenames');
    diffFilenames.html(makeDiffFilenames(param.diffs));
    resetFilenameAddedDeletedLineCountHandlers();
    diffContent.html(makeDiffContent(param.diffs));
    buildDiffFilenameHandlers(param.diffs);
    showFile(param.currentFilenameId);
  };

  const showFile = (filenameId) => {
    $(`#radio_${filenameId}`)
      .click()
      .scrollIntoView({ direction: 'vertical' });
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const makeDiffFilenames = (diffs) => {
    let html = '<table class="filenames">';
    html += makeIconHeadings();
    sortedDiffs(diffs).forEach(diff => html += makeDiffTr(diff));
    html += '</table>';
    return html;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const makeIconHeadings = () => {
    let html = '';
    html += '<tr>';
    if (review.inDiffMode()) {
      html += makeTd(makeDiffLineCountIcon('deleted', '&mdash;'));
      html += makeTd(makeDiffLineCountIcon('added', '+'));
      html += makeTd(makeDiffLineCountIcon('same', '='));
      html += makeTd(makeDiffHelpIcon()); // Aligns withs glyph-id
    }
    html += makeTd(''); // Aligns with filename-td
    html += '</tr>';
    return html;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const makeDiffTr = (diff, glyph) => {
    glyph ||= diff;
    let html = '';
    html += '<tr>';
    if (review.inDiffMode()) {
      html += makeTd(makeDiffCount(diff, 'deleted'));
      html += makeTd(makeDiffCount(diff, 'added'));
      html += makeTd(makeDiffCount(diff, 'same'));
      html += makeTd(makeDiffType(glyph));
    }
    html += makeTd(makeDiffFilename(diff));
    html += '</tr>';
    return html;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const makeDiffLineCountIcon = (cssName, icon) => {
    return `<div class="diff-line-count-icon ${cssName}">${icon}</div>`;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const makeDiffHelpIcon = () => {
    let tip = '';
    tip += '<span class="diff-line-count-icon deleted">-</span> ';
    tip += '<span class="diff-line-count-icon added">+</span> ';
    tip += '<span class="diff-line-count-icon same">=</span> number of deleted,added,unchanged lines.<br/>';
    tip += '<hr/>';
    tip += 'click a filename to review it.<br/>';
    tip += 'reclick a filename to cycle through its diffs.<br/>';
    tip += '<hr/>';
    tip += '<span class="diff-type-marker created"></span><span class="diff-filename created">created-file</span><br/>';
    tip += '<span class="diff-type-marker deleted"></span><span class="diff-filename deleted">deleted-file</span><br/>';
    tip += '<span class="diff-type-marker unchanged"></span><span class="diff-filename unchanged">unchanged-file</span><br/>';
    tip += '<span class="diff-type-marker renamed"></span><span class="diff-filename renamed">renamed-file</span>';
    tip += ' for old filename, hover over the <span class="diff-type-marker renamed"></span>';
    const $div = $('<div>', {
      class: 'diff-help-icon',
      'data-tip': tip
    });
    $div.text('?');
    return outerHTML($div);
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const makeDiffCount = (diff, cssName) => {
    const lineCount = diff[`${cssName}_line_count`];
    const css = lineCount > 0 ? cssName : '';
    const div = $('<div>', {
      'class': `diff-line-count ${css}`,
      'data-filename': diffFilename(diff)
    });
    div.html(lineCount > 0 ? lineCount : '&nbsp;');
    return outerHTML(div);
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const makeDiffType = (diff) => {
    if (diff === '&nbsp;') { return diff; }
    const $div = $('<div>', { class:`diff-type-marker ${diff.type}` });
    if (diff.type === 'renamed') {
      const tip = `was<span class="diff-filename unchanged">${diff.old_filename}</span>`;
      $div.attr('data-tip', tip);
    }
    return outerHTML($div);
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const makeDiffFilename = (diff) => {
    return outerHTML($('<div>', {
      'class': `diff-filename ${diff.type}`,
      'data-filename': diffFilename(diff),
      'id': `radio_${diff.id}`,
      'text': diffFilename(diff)
    }));
  };

  const diffFilename = (diff) => {
    if (diff.new_filename) {
      return diff.new_filename;
    } else {
      return diff.old_filename;
    }
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const outerHTML = (element) => element.get(0).outerHTML;

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const sortedDiffs = (diffs) => {
    // Ensure filenames appear in the same order as kata/edit page
    const filenames = diffs.map(diff => diffFilename(diff));
    const sorted = cd.sortedFilenames(filenames);
    const diffFor = (filename) => diffs.find(diff => diffFilename(diff) === filename);
    return sorted.map(filename => diffFor(filename));
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const resetFilenameAddedDeletedLineCountHandlers = () => {

    const display = (node, name, value) => {
      // Only [+][-] counts for current filename are live
      if ($(node).html() === '&nbsp;') { return; }
      if ($(node).attr('disabled') !== 'disabled') {
        const filename = $(node).data('filename');
        const selector = `[id="${filename}_diff_div"] ${name}`;
        $(selector).css('display', value);
        if (value === 'none') {
          $(node).removeClass('on').addClass('off');
        } else {
          $(node).removeClass('off').addClass('on');
        }
      }
    };

    [ 'deleted', 'added' ].forEach(type => {
      $(`.diff-line-count.${type}`)
        .clickToggle(
          function() { display(this, type, 'none' ); },
          function() { display(this, type, 'block'); }
        );
    });
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const buildDiffFilenameHandlers = (diffs) => {
    diffs.forEach(diff => {
      const filename = diffFilename(diff);
      const $filename = $(`#radio_${diff.id}`, $reviewPage);
      diff.section_index = 0;
      diff.clicked = false;
      $filename.click(() => {
        selectLineCounts(filename);
        selectFilename($filename);
        review.selectFile(filename);
        scrollToNextDiffChunkOnReclick(diff, filename);
      });
    });
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const selectLineCounts = (filename) => {
    $('.diff-line-count').attr('disabled', true);
    $(`.diff-line-count[data-filename="${filename}"]`).attr('disabled', false);
  };

  const selectFilename = ($filename) => {
    $('.diff-filename', $reviewPage).removeClass('selected');
    $filename.addClass('selected');
  };

  review.selectFile = (filename) => {
    $('.filename_div', $reviewPage).hide();
    $(`[id="${filename}_diff_div"]`).show();
  };

  const scrollToNextDiffChunkOnReclick = (diff, filename) => {
    const hasDiffChunks = () => diff.section_count > 0;
    const isFirstClick = () => !diff.clicked;
    const isReClick = () => param.filename === filename;
    if (hasDiffChunks() && (isFirstClick() || isReClick())) {
      const $diffSheet = $(`[id="diff_file_content_for_${filename}"]`);
      const $section = $(`#${diff.id}_section_${diff.section_index}`);
      const position = { scrollTop: '+=' + ($section.offset().top - 250) + 'px' };
      const halfSecond = 500;
      $diffSheet.animate(position, halfSecond);
      diff.section_index += 1;
      diff.section_index %= diff.section_count;
    }
    param.filename = filename;
    diff.clicked = true;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const makeDiffContent = (diffs) => {
    const holder = $('<span>');
    diffs.forEach(diff => {
      const filename = diffFilename(diff);
      const numbers = diff.line_numbers;
      const content = diff.content;
      holder.append(review.makeDiffFileContent(filename, numbers, content));
    });
    return holder;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  review.makeDiffFileContent = (filename, lineNumbers, fileContent) => {
    const file = $('' +
      `<div id="${filename}_diff_div" class="filename_div">` +
      '<table>' +
        '<tr class="valign-top">' +
          makeTd('<div class="diff-line-numbers"></div>') +
          makeTd(`<div id="diff_file_content_for_${filename}"` +
                 ' class="diff-sheet"></div>') +
        '</tr>' +
      '</table>' +
      '</div>'
      );
    const numbers = $('.diff-line-numbers', file);
    const content = $('.diff-sheet', file);
    numbers.html(lineNumbers);
    content.html(fileContent);
    bindLineNumberScrolling(content, numbers);
    return file;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const bindLineNumberScrolling = ($content, $numbers) => {
    const synchScroll = () => $numbers.scrollTop($content.scrollTop());
    $content.bind({
      keydown   : synchScroll,
      scroll    : synchScroll,
      mousewheel: synchScroll,
      mousemove : synchScroll,
      mousedown : synchScroll,
      mouseup   : synchScroll
    });
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const setForkButtonTip = () => {
    const $button = $('#fork-button');
    const tip = `create a new<br/>exercise from this<br/>traffic-light's files`;
    cd.createTip($button, tip);
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const setCheckoutButtonTip = () => {
    // Prefer 'checkout' to 'revert' since in a group exercises
    // you can revert to other avatar's traffic-lights.
    const $button = $('#checkout-button');
    const tip = `make this traffic-light's<br/>files your current files`;
    cd.createTip($button, tip);
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const setupButton = (name, handler) => {
    const button = `<button id="${name}-button" type="button"></button>`;
    $(`#${name}-button-box`).html(button);
    $(`#${name}-button`)
      .text(name)
      .unbind('click')
      .bind('click', handler);
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const makeTr = (html) => `<tr>${html}</tr>`;
  const makeTd = (html) => `<td>${html}</td>`;

  // - - - - - - - - - - - - - - - - - - - - - - - -

  setupButton('fork', () => cd.forkDialog(param.id, param.nowIndex));
  setForkButtonTip();
  if (!inTestPage) {
    $reviewPage.show();
    refresh();
  }

});

//--></script>

<%= render partial: 'shared/filenames_sorted' %>

<div id="review-top-row">
  <%= render partial: 'review/avatar_navigator' %>
  <%= render partial: 'review/traffic_light_navigator' %>
  <div id="review-traffic-lights"></div>
</div>

<table>
  <tr valign="top">
    <td class="left-column">
      <table class="controls">
        <tr>
          <td><div id="resume-button-box"></div></td>
          <td><%= render partial: 'review/diff_checkbox' %></td>
          <td><div id="fork-button-box"></div></td>
          <td><div id="checkout-button-box"></div></td>
        </tr>
      </table>
      <table>
        <tr><td><div id="diff-filenames"></div></td></tr>
        <tr><td><%= render partial: 'review/refresh_output' %></td></tr>
      </table>
    </td>
    <td>
      <div id="diff-content"></div>
    </td>
  </tr>
</table>

<script type="text/javascript"><!--
'use strict';
$(() => {

  const review = cd.review;

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // After refresh() has been called review.params also contains...
  // .events
  //   holds the traffic-lights and is used to program
  //   the traffic-light [<][<][>][>] navigator buttons.
  // .prevAvatarId
  // .nextAvatarId
  //   hold the kata-ids and used is used to program
  //   the avatar [<][>] navigator buttons.
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  const $kataPage = $('#kata-page');

  review.page = $('#review-page');

  review.inTestPage = $kataPage.length !== 0;

  review.params = {
        version: "<%= @version %>",
             id: "<%= @id %>",
        groupId: "<%= @group_id %>",
    avatarIndex: "<%= @avatar_index %>",
       wasIndex: "<%= @was_index %>",
       nowIndex: "<%= @now_index %>"
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  cd.setReviewData = (version, id, groupId, avatarIndex, wasIndex, nowIndex) => {
    // Called only from app/views/kata/_traffic_lights.html.erb
    // The [resume] & [checkout] buttons are only shown on kata/edit. [1]
    review.params = {
          version:version,
               id:id,
          groupId:groupId,
      avatarIndex:avatarIndex,
         wasIndex:wasIndex,
         nowIndex:nowIndex
    };
    fadeIntoReviewPage();
    review.setupButton('resume', () => fadeIntoKataPage(() => { // [1]
      cd.kata.editor.refocus();
    }));
    review.setupButton('checkout', () => fadeIntoKataPage(() => { // [1]
      cd.checkout({ src_id:review.params.id, src_index:review.params.nowIndex });
    }));
    setCheckoutButtonTip();
    review.refresh();
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const fadeIntoReviewPage = () => {
    $kataPage.fadeOut('fast', () => {
      review.page.fadeIn('fast');
    });
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const fadeIntoKataPage = (onComplete) => {
    review.page.fadeOut('fast', () => {
      $kataPage.fadeIn('fast', () => {
        onComplete();
      });
    });
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  review.moveToTrafficLight = (index) => {
    const delta = review.inDiffMode() ? 1 : 0;
    review.params.nowIndex = index;
    review.params.wasIndex = index - delta;
    refresh();
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  review.refresh = () => {
    const params = review.params;
    const args = {
           version: params.version,
                id: params.id,
          group_id: params.groupId,
         was_index: params.wasIndex,
         now_index: params.nowIndex
    };
    review.waitSpinnerGetJSON('/differ/diff', args, (data) => {
      review.params = data;
      review.refreshAvatarNavigator();
      review.refreshTrafficLights();          // this first
      review.refreshTrafficLightsNavigator(); // this second
      review.refreshDiffCheckBox();
      scrollCurrentTrafficLightIntoView();
      cd.setupHoverTips($('[data-tip]'));
    });
    review.refreshFiles();
    review.refreshOutput();
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  review.waitSpinnerGetJSON = (path, params, callBack) => {
    cd.waitSpinner.fadeIn('fast', () => {
      $.getJSON(path, params, (data) => {
        cd.waitSpinner.fadeOut('fast', () => {
          callBack(data);
        });
      });
    });
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const scrollCurrentTrafficLightIntoView = () => {
    // refreshTrafficLights() has updated the dom with a $('#traffic-light-marker')
    // I cannot find a nice way to access it once the dom is ready. So this :-(
    const quarterSecond = 250;
    const scroller = () => {
      $('#traffic-light-marker').scrollIntoView({
        direction:'horizontal',
        duration:'slow'
      });
    };
    setTimeout(scroller, quarterSecond);
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const setCheckoutButtonTip = () => {
    // Prefer 'checkout' to 'revert' since in a group exercises
    // you can revert to other avatar's traffic-lights.
    const $button = $('#checkout-button');
    const tip = `make this traffic-light's<br/>files your current files`;
    cd.createTip($button, tip);
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  review.setupButton = (name, handler) => {
    const button = `<button id="${name}-button" type="button"></button>`;
    $(`#${name}-button-box`).html(button);
    $(`#${name}-button`)
      .text(name)
      .unbind('click')
      .bind('click', handler);
  };

});
//--></script>

<%= render partial: 'shared/filenames_sorted' %>
<%= render partial: 'review/file_picker' %>

<div id="review-top-row">
  <%= render partial: 'review/avatar_navigator' %>
  <%= render partial: 'review/traffic_light_navigator' %>
  <%= render partial: 'review/traffic_lights' %>
</div>

<table>
  <tr valign="top">
    <td class="left-column">
      <table class="controls">
        <tr>
          <td><div id="resume-button-box"></div></td>
          <td><%= render partial: 'review/checkbox' %></td>
          <td><%= render partial: 'review/fork_button' %></td>
          <td><div id="checkout-button-box"></div></td>
        </tr>
      </table>
      <table>
        <tr><td><%= render partial: 'review/filenames' %></td></tr>
        <tr><td><%= render partial: 'review/output' %></td></tr>
      </table>
    </td>
    <td>
      <div id="diff-content"></div>
      <div id="diff-content-output"></div>
    </td>
  </tr>
</table>

<script type="text/javascript"><!--
'use strict';
$(() => {
  const review = cd.review;
  if (!review.inTestPage) {
    review.page.show();
    review.refresh();
  }
});
//--></script>


<script type="text/javascript"><!--

$(() => {

  //---------------------------------------------------------------------
  // This review page doubles as a review *dialog* from the kata/edit page
  // traffic-light click handlers.
  // Everywhere else review is its own *page* with its own URL.
  // The [revert] button is available only from the review *dialog*.
  //---------------------------------------------------------------------

  let param = {
          id: "<%= @kata.id %>",
      avatar: "<%= @avatar.name %>",
      wasTag: "<%= @was_tag %>",
      nowTag: "<%= @now_tag %>",
    filename: "<%= @filename %>"
  };

  cd.setReviewDialogData = (id, avatar, wasTag, nowTag, filename) => {
    param = {
            id:id,
        avatar:avatar,
        wasTag:wasTag,
        nowTag:nowTag,
      filename:filename
    };
    reviewRefresh();
  };

  //-----------------------------------------
  // refresh diff? [x]
  //-----------------------------------------

  const refreshDiffCheckBox = () => {
    diffCheckBox()
      .attr('checked', inDiffMode())
      .unbind('click')
      .bind('click', () => { show(param.nowTag); });
  };

  const diffCheckBox = () => {
    return $('#diff-checkbox');
  };

  const inDiffMode = () => {
    return param.wasTag != param.nowTag;
  }

  //-----------------------------------------
  // refresh traffic-lights
  //-----------------------------------------

  const refreshTrafficLights = () => {
    const trafficLights = $('#review-traffic-lights');
    trafficLights.html(makeTrafficLightsHtml(param.lights));
    $.each($('.diff-traffic-light'), (_, light) => {
      const $light = $(light);
      const wasTag = $light.data('was-tag');
      const nowTag = $light.data('now-tag');
      $light.click(() => { show(nowTag); });
      cd.setupHoverTip($light);
    });
  };

  const makeTrafficLightsHtml = (lights) => {
    let html = '';
    let wasTag = 0;
    let lastColour = '';
    html += '<table><tr>';
    $.each(lights, (n, light) => {
      const nowTag = light.number;
      const colour = light.colour;
      const barGap = (param.nowTag == nowTag) ? 'bar' : 'gap';
      html +=
        "<td><div class='diff-traffic-light'" +
              " data-tip='ajax:traffic_light'" +
              " data-id='" + param.id + "'" +
              " data-avatar-name='" + param.avatar + "'" +
              " data-colour='" + colour + "'" +
              " data-was-tag='" + wasTag + "'" +
              " data-now-tag='" + nowTag + "'>" +
          "<img class='with-bar-gap' src='/images/bulb_" + colour + '_' + barGap + ".png'/>" +
        '</div></td>';
        wasTag = nowTag;
        lastColour = light.colour;
    });
    html += "<td><div class='traffic-light-count " + lastColour + "'>" + lights.length + '</div></td>';
    html += '</tr></table>';
    return html;
  };

  //-----------------------------------------
  // refresh [<] avatar [>]
  //-----------------------------------------

  const refreshAvatarControls = () => {
    refreshPrevAvatarHandler();
    refreshAvatarImage();
    refreshNextAvatarHandler();
  };

  const refreshAvatarImage = () => {
    $('#avatar').parent().html(makeAvatarImageHtml());
  };

  const makeAvatarImageHtml = () => {
    return '<img id="avatar" src="/images/avatars/' + param.avatar + '.jpg"/>';
  };

  const refreshPrevAvatarHandler = () => {
    refreshAvatarHandler('prev', param.prevAvatar);
  };

  const refreshNextAvatarHandler = () => {
    refreshAvatarHandler('next', param.nextAvatar);
  };

  const refreshAvatarHandler = (id, name) => {
    const title = () => {
      const text = 'Click to review ' + name + "'s ";
      return text + (inDiffMode() ? 'diffs' : 'current code');
    };
    $('#' + id + '-avatar')
      .attr('disabled', name == '')
      .attr('title', title())
      .unbind('click')
      .bind('click', () => {
        param.avatar = name;
        if (inDiffMode()) {
          show(1);
        } else {
          showLatestNoDiff();
        }
      });
  };

  //-----------------------------------------
  // refresh [<] tag [>]
  //-----------------------------------------

  const refreshTagControls = () => {
    const colour = param.lights[param.nowTag - 1].colour;
    const minTag = 1;
    const maxTag = param.lights.length;
    const hasPrevTag = minTag < param.nowTag;
    const hasNextTag =          param.nowTag < maxTag;

    $('#now-tag-number')
      .removeClass()
      .addClass(colour)
      .text(param.nowTag);

    refreshTag(hasPrevTag, $('#prev-tag'),  param.nowTag - 1);
    refreshTag(hasNextTag, $('#next-tag'),  param.nowTag + 1);
  };

  const refreshTag = (on, button, newTag) => {
    button
      .attr('disabled', !on)
      .css('cursor', on ? 'pointer' : 'default');
    if (on) {
      button
        .attr('title', toolTip(newTag))
        .unbind('click')
        .bind('click', () => { show(newTag); });
    }
  };

  const toolTip = (tag) => {
    if (inDiffMode()) {
      return 'Show diff ' + (tag-1) + '<->' + tag;
    } else {
      return 'Show ' + tag;
    }
  };

  //-----------------------------------------
  // refresh files
  //-----------------------------------------

  const refreshFiles = () => {
    const diffContent = $('#diff-content');
    const diffFilenames = $('#diff-filenames');
    diffFilenames.html(makeDiffFilenames(param.diffs));
    resetFilenameAddedDeletedLineCountHandlers();
    diffContent.html(makeDiffContent(param.diffs));
    buildDiffFilenameHandlers(param.idsAndSectionCounts);
    showFile(param.currentFilenameId);
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const makeDiffFilenames = (diffs) => {
    // align-right is for diff toggling added/deleted line counts
    return '' +
      '<table align="right">' +
        '<tr>' +
            cd.td(makeDiffFilenamesColumn(diffs)) +
            cd.td(makeDiffDeletedCountColumn(diffs)) +
            cd.td(makeDiffAddedCountColumn(diffs)) +
        '</tr>' +
      '</table>';
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const makeDiffFilenamesColumn = (diffs) => {
    let html = '';
    html += '<table>';
    $.each(sortedDiffs(diffs), (_, diff) => {
      const td = $('<td>');
      const filenameDiv =
        $('<div>', {
            'class': 'filename',
            'data-filename': diff.filename,
            'id': 'radio_' + diff.id,
            'text': diff.filename
        });
      td.append(filenameDiv);
      html += '<tr>' + td.html() + '</tr>';
    });
    html += '</table>';
    return html;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const makeDiffDeletedCountColumn = (diffs) => {
    return makeDiffCountColumn(diffs, 'deleted_line_count', 'deleted');
  };

  const makeDiffAddedCountColumn = (diffs) => {
    return makeDiffCountColumn(diffs, 'added_line_count', 'added');
  };

  const makeDiffCountColumn = (diffs, propertyName, cssName) => {
    let html = '';
    if (!diffCheckBox().is(':checked')) {
      return html;
    }
    html += '<table>';
    $.each(sortedDiffs(diffs), (_, diff) => {
      const count = diff[propertyName];
      const td = $('<td>');
      const noneOrSome = (count == 0) ? 'none' : 'some';
      const div = $('<div>', {
        'class': 'diff-' + cssName + '-line-count ' + noneOrSome + ' button',
        'data-filename': diff.filename
      });
      div.append(count);
      td.append(div);
      html += '<tr>' + td.html() + '</tr>';
    });
    html += '</table>';
    return html;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const sortedDiffs = (diffs) => {
    var filenames = [];
    $.each(diffs, (_, diff) => {
      filenames.push(diff.filename);
    });
    // ensure filenames appear in the same order as kata/edit page
    const sorted = cd.sortedFilenames(filenames);
    const diffFor = (filename) => {
      for (let i = 0; i < diffs.length; i++) {
        if (diffs[i].filename == filename) {
          return diffs[i];
        }
      }
    };
    let result = [];
    $.each(sorted, (_, filename) => {
      result.push(diffFor(filename));
    });
    return result;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const resetFilenameAddedDeletedLineCountHandlers = () => {

    const display = (node, name, value) => {
      if ($(node).attr('disabled') != 'disabled') {
        var filename = $(node).data('filename');
        var selector = '[id="' + filename + '_diff_div"] ' + name;
        $(selector).css('display', value);
      }
    };

    $('.diff-deleted-line-count')
      .clickToggle(
        function() { display(this, 'deleted', 'none' ); },
        function() { display(this, 'deleted', 'block'); }
      );

    $('.diff-added-line-count')
      .clickToggle(
        function() { display(this, 'added', 'none' ); },
        function() { display(this, 'added', 'block'); }
      );
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const buildDiffFilenameHandlers = (diffs) => {
    // Builds click handlers for all filenames for a given
    // [ kata-id, animal-name, was-tag, now-tag] tuple.
    // When you open a new filename it auto-scrolls its first diff-chunk.
    // When you reclick a filename it auto-scrolls to its *next* diff-chunk.
    const getFilename = (node) => {
      return $.trim(node.text());
    };
    const id = (name) => {
      return $('[id="' + name + '"]');
    };
    const diffFileContentFor = (filename) => {
      return id('diff_file_content_for_' + filename);
    };
    const diffFileDiv = (filename) => {
      return id(filename + '_diff_div');
    };
    let previousFilenameNode;
    let alreadyOpened = [];

    const loadFrom = (diff) => {
      const id = diff.id;
      const filenameNode = $('#radio_' + id);
      const filename = getFilename(filenameNode);
      const sectionCount = diff.section_count;
      const diffSheet = diffFileContentFor(filename);
      let sectionIndex = 0;

      if (sectionCount > 0) {
        filenameNode.attr('title', 'Auto-scroll through diffs');
      }

      return () => {

        const reselected =
          previousFilenameNode != undefined &&
            getFilename(previousFilenameNode) == filename;

        $('.diff-deleted-line-count, .diff-added-line-count').attr('disabled', true);
        $('.diff-deleted-line-count[data-filename="'+filename+'"]').attr('disabled', false);
        $('.diff-added-line-count[data-filename="'+filename+'"]').attr('disabled', false);

        cd.radioEntrySwitch(previousFilenameNode, filenameNode);

        if (previousFilenameNode != undefined) {
          diffFileDiv(getFilename(previousFilenameNode)).hide();
        }
        diffFileDiv(getFilename(filenameNode)).show();
        previousFilenameNode = filenameNode;
        param.filename = filename;

        if (sectionCount > 0 && (reselected || !cd.inArray(filename, alreadyOpened))) {
          const section = $('#' + id + '_section_' + sectionIndex);
          const downFromTop = 250;
          const halfSecond = 500;
          diffSheet.animate({
            scrollTop: '+=' + (section.offset().top - downFromTop) + 'px'
            }, halfSecond);
          sectionIndex += 1;
          sectionIndex %= sectionCount;
        }
        alreadyOpened.push(filename);
      };
    }; // loadFrom()

    $.each(diffs, (_n, diff) => {
      const filename = $('#radio_' + diff.id);
      filename.click(loadFrom(diff));
    });
  }; // buildDiffFilenameHandlers()

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const makeDiffContent = (diffs) => {
    const holder = $('<span>');
    $.each(diffs, (_, diff) => {
      const table = $('' +
        '<div id="' + diff.filename + '_diff_div" class="filename_div">' +
        '<table>' +
          '<tr class="valign-top">' +
            cd.td('<div class="diff-line-numbers"></div>') +
            cd.td('<div id="diff_file_content_for_' + diff.filename + '"' +
                   ' class="diff-sheet"></div>') +
          '</tr>' +
        '</table>' +
        '</div>'
        );
      const content = $('.diff-sheet', table);
      const numbers = $('.diff-line-numbers', table);
      content.html(diff.content);
      numbers.html(diff.line_numbers);
      bindLineNumberScrolling(content, numbers);
      holder.append(table);
    });
    return holder;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const bindLineNumberScrolling = ($content, $numbers) => {
    const synchScroll = () => {
      $numbers.scrollTop($content.scrollTop());
    };
    $content.bind({
      keydown   : synchScroll,
      scroll    : synchScroll,
      mousewheel: synchScroll,
      mousemove : synchScroll,
      mousedown : synchScroll,
      mouseup   : synchScroll
    });
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const showFile = (filenameId) => {
    const filename =  $('#radio_' + filenameId);
    filename.click();
    filename.scrollIntoView({ direction: 'vertical' });
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const show = (tag) => {
    // preserve diff on/off state
    param.wasTag = tag - (diffCheckBox().is(':checked') ? 1 : 0);
    param.nowTag = tag;
    refresh();
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const showLatestNoDiff = () => {
    const lastTag = -1;
    param.wasTag = lastTag;
    param.nowTag = lastTag;
    refresh();
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const refresh = () => {
    if (inDialog()) {
      reviewRefresh();
    } else {
      window.location.href =
        cd.showReviewUrl(
          param.id,
          param.avatar,
          param.wasTag,
          param.nowTag,
          param.filename
        );
    }
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const inDialog = () => {
    const dialog = $('div.ui-dialog-content');
    return dialog.size() == 1;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const reviewRefresh = () => {
    const reviewParams = {
            id: param.id,
        avatar: param.avatar,
       was_tag: param.wasTag,
       now_tag: param.nowTag,
      filename: param.filename
    };
    $('.ui-dialog').addClass('busy');
    $.getJSON('/differ/diff', reviewParams, (data) => {
      $('.ui-dialog').removeClass('busy');
      param = data;
      refreshDiffCheckBox();
      refreshTrafficLights();
      refreshAvatarControls();
      refreshTagControls();
      refreshFiles();
      refreshForkButton();
      refreshRevertButton();
      refreshDownloadButton();
      const light = $('img[src $= "_bar.png"]');
      const options = { direction: 'horizontal', duration: 'slow' };
      light.scrollIntoView(options);
    });
  };

  //-----------------------------------------
  // refresh [fork] {create a new practice-session}
  //-----------------------------------------

  const refreshForkButton = () => {
    const button = $('#fork-button');
    cd.setTip(button, () => {
      const tip = 'setup a new session from ' + param.avatar + ' ' + param.nowTag;
      cd.showHoverTip(button, tip);
    });
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const doFork = () => {
    const forkParams = {
          id: param.id,
      avatar: param.avatar,
         tag: param.nowTag
    };
    $.getJSON('/forker/fork', forkParams, (data) => {
      if (data.forked) {
        cd.newDojoDialog(data);
      } else {
        forkFailedDialog(data.reason);
      }
    });
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const forkFailedDialog = (reason) => {
    const message =
      'Failed: On the originating server, ' + reason + ' does not exist';
    $('<div>')
    .html(message)
    .dialog({
      title: cd.dialogTitle('create a practice-session'),
      autoOpen: true,
      closeOnEscape: true,
      modal: true,
      width: 510,
      buttons: { ok: function() { $(this).remove(); } }
    });
  };

  //-----------------------------------------
  // refresh [revert] (from dialog only)
  //-----------------------------------------

  const refreshRevertButton = () => {
    const button = $('#revert-button');
    cd.setTip(button, () => {
      const tip = 'revert to ' + param.avatar + ' '  + param.nowTag;
      cd.showHoverTip(button, tip);
    });
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const doRevert = () => {
    const revertParams = {
          id: param.id,
      avatar: param.avatar,
         tag: param.nowTag
    };
    $.getJSON('/reverter/revert', revertParams, (data) => {
      $('#review-dialog').dialog('close');
      deleteAllCurrentFiles();
      copyRevertFilesToCurrentFiles(data.visibleFiles);
      $('#test-button').click();
    });
  };

  //-----------------------------------------
  // refresh [download]
  //-----------------------------------------

  const refreshDownloadButton = () => {
    const button = $('#download-button');
    cd.setTip(button, () => {
      const tip = 'download files from ' + param.avatar + ' ' + param.nowTag;
      cd.showHoverTip(button, tip);
    });
  };

  const doDownload = () => {
    const url = '/download_tag/' + param.id + '/' + param.avatar + '/' + param.nowTag;
    window.location = url;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const deleteAllCurrentFiles = () => {
    $.each(cd.filenames(), (_, filename) => {
      if (filename !== 'output') {
        cd.deleteFile(filename);
      }
    });
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const copyRevertFilesToCurrentFiles = (visibleFiles) => {
    for (let filename in visibleFiles) {
      if (filename !== 'output') {
        cd.newFileContent(filename, visibleFiles[filename]);
      }
    }
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const setupButton = (name, handler) => {
    $('#'+name+'-button-container').html('<button id="'+name+'-button" type="button"></button>');
    $('#'+name+'-button')
      .text(name)
      .unbind('click')
      .bind('click', handler);
    if (name == 'download') {
      refreshDownloadButton();
    }
    if (name == 'fork') {
      refreshForkButton();
    }
    if (name == 'revert') {
      refreshRevertButton();
    }
  };

  //-----------------------------------------
  //-----------------------------------------

  if (inDialog()) {
    setupButton('revert', () => { doRevert(); });
    setupButton('close',  () => { $('#review-dialog').dialog('close'); });
  } else {
    reviewRefresh();
  }
  setupButton('download', () => { doDownload(); })
  setupButton('fork',     () => { doFork(); });

});

//--></script>

<%= render(:partial => 'shared/extension_filenames') %>

<table>
  <tr valign="top">
    <td align="right" style="width:300px" rowspan="2">
      <%= render(:partial => 'review/navigate_control') %>
      <%= render(:partial => 'review/diff_checkbox') %>
      <div id="diff-filenames"></div>
    </td>
    <td>
      <div id="review-traffic-lights"></div>
    </td>
  </tr>
  <tr valign="top">
    <td>
      <div id="diff-content"></div>
    </td>
  </tr>
</table>

<%= render(:partial => 'review/buttons') %>

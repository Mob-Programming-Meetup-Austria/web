<script type="text/javascript"><!--
'use strict';
$(() => {

  //---------------------------------------------------------------------
  // This review page doubles as a review *dialog* from the kata/edit
  // page traffic-light click handlers.
  // Everywhere else review is its own *page* with its own URL.
  // The [revert] button is available only from the review *dialog*.
  //---------------------------------------------------------------------

  const inDialog = <%= inDialog %>;

  let param = {
            id: "<%= @id %>",
    avatarName: "<%= @avatar_name %>",
      wasIndex: "<%= @was_index %>",
      nowIndex: "<%= @now_index %>",
      filename: "<%= @filename %>"
  };

  // after refresh() has been called param also contains param.events

  cd.setReviewDialogData = (id, avatarName, wasIndex, nowIndex, filename) => {
    param = {
              id:id,
      avatarName:avatarName,
        wasIndex:wasIndex,
        nowIndex:nowIndex,
        filename:filename
    };
    reviewRefresh();
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const show = (index) => {
    param.nowIndex = index;
    if (inDiffMode()) {
      param.wasIndex = (prevEventIndex(param.nowIndex) || 0);
    } else {
      param.wasIndex = index;
    }
    refresh();
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const refresh = () => {
    if (inDialog) {
      reviewRefresh();
    } else {
      window.location.href =
        cd.showReviewUrl(
          param.id,
          param.wasIndex,
          param.nowIndex,
          param.filename
        );
    }
  };

  //-----------------------------------------
  // refresh diff? [x]
  //-----------------------------------------

  const refreshDiffCheckBox = () => {
    diffCheckBox()
      .attr('checked', param.wasIndex !== param.nowIndex)
      .click(() => show(param.nowIndex));
  };

  const diffCheckBox = () => $('#diff-checkbox');

  const inDiffMode = () => diffCheckBox().is(':checked');

  //-----------------------------------------
  // refresh traffic-lights
  //-----------------------------------------

  const refreshTrafficLights = () => {
    const trafficLights = $('#review-traffic-lights');
    trafficLights.html(makeTrafficLightsHtml());
    $.each($('.diff-traffic-light', trafficLights), (_, light) => {
      const $light = $(light);
      const nowIndex = $light.data('index');
      $light.click(() => show(nowIndex));
      const wasIndex = inDiffMode() ? prevEventIndex(nowIndex) : nowIndex;
      // is the tip worth having if we're not in diff mode?
      cd.setupTrafficLightTip($light, param.id, wasIndex, nowIndex);
    });
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const makeTrafficLightsHtml = () => {
    let html = '';
    let wasIndex = 0;
    let lastColour = '';
    let trafficLightCount = 0;
    html += '<table><tr>';
    $.each(param.events, (_n, event) => {
      const colour = event.colour;
      if (colour !== '') {
        const nowIndex = event.index;
        const barOrGap = (param.nowIndex === nowIndex) ? 'bar' : 'gap';
        html += makeTd(makeTrafficLightHtml(colour, wasIndex, nowIndex, barOrGap));
        wasIndex = nowIndex;
        lastColour = event.colour;
        trafficLightCount++;
      }
    });

    html += makeTd(makeTrafficLightCountHtml(trafficLightCount, lastColour));
    html += '</tr></table>';

    return html;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const makeTrafficLightHtml = (colour, wasIndex, nowIndex, barOrGap) => {
    return [
      "<div class='diff-traffic-light'",
        ` data-id='${param.id}'`,
        ` data-colour='${colour}'`,
        ` data-index='${nowIndex}'>`,
        `<img class='with-bar-gap' src='/images/bulb_${colour}_${barOrGap}.png'/>`,
      '</div>'
    ].join('');
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const makeTrafficLightCountHtml = (count, colour) => {
    return `<div class='traffic-light-count ${colour}'>${count}</div>`;
  };

  //-----------------------------------------
  // refresh [<] event-index [>]
  //-----------------------------------------
  // [<] is enabled if there is an event before param.wasIndex
  // [>] is enabled if there is an event after  param.nowIndex
  //-----------------------------------------

  const refreshEventControls = () => {
    refreshIndex($('#prev-index'), prevEventIndex(param.nowIndex));
    $('#index-container').html(eventHtml());
    refreshIndex($('#next-index'), nextEventIndex(param.nowIndex));
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const prevEventIndex = (n) => {
    // index==0 is the kata creation event
    const firstIndex = 1;
    if (n === null || n === firstIndex) {
      // signals disabled-button in refreshIndex()
      return null;
    } else {
      // Note: assumes only test events
      return n - 1;
    }
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const nextEventIndex = (n) => {
    const lastIndex = param.events.length - 1;
    if (n === null || n === lastIndex) {
      // signals disabled-button in refreshIndex()
      return null;
    } else {
      // Note: assumes only test events
      return n + 1;
    }
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const eventHtml = () => {
    const index = param.nowIndex;
    const colour = param.events[index].colour;
    return `<div id="index-number" class="${colour}">${index}</div>`;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const refreshIndex = (button, index) => {
    const on = (index !== null);
    button
      .attr('disabled', !on)
      .css('cursor', on ? 'pointer' : 'default');
    if (on) {
      button
        .unbind('click')
        .bind('click', () => show(index));
    }
  };

  //-----------------------------------------
  // refresh files
  //-----------------------------------------

  const refreshFiles = () => {
    const diffContent = $('#diff-content');
    const diffFilenames = $('#diff-filenames');
    diffFilenames.html(makeDiffFilenames(param.diffs));
    resetFilenameAddedDeletedLineCountHandlers();
    diffContent.html(makeDiffContent(param.diffs));
    buildDiffFilenameHandlers(param.idsAndSectionCounts);
    showFile(param.currentFilenameId);
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const makeDiffFilenames = (diffs) => {
    // align-right is for diff toggling added/deleted line counts
    return '' +
      '<table align="right">' +
        '<tr>' +
            makeTd(makeDiffFilenamesColumn(diffs)) +
            makeTd(makeDiffDeletedCountColumn(diffs)) +
            makeTd(makeDiffAddedCountColumn(diffs)) +
        '</tr>' +
      '</table>';
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const makeDiffFilenamesColumn = (diffs) => {
    let html = '';
    html += '<table>';
    $.each(sortedDiffs(diffs), (_, diff) => {
      const td = $('<td>');
      const filenameDiv =
        $('<div>', {
            'class': 'filename',
            'data-filename': diff.filename,
            'id': `radio_${diff.id}`,
            'text': diff.filename
        });
      td.append(filenameDiv);
      html += makeTr(td.html());
    });
    html += '</table>';
    return html;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const makeDiffDeletedCountColumn = (diffs) => {
    return makeDiffCountColumn(diffs, 'deleted_line_count', 'deleted');
  };

  const makeDiffAddedCountColumn = (diffs) => {
    return makeDiffCountColumn(diffs, 'added_line_count', 'added');
  };

  const makeDiffCountColumn = (diffs, propertyName, cssName) => {
    let html = '';
    if (!diffCheckBox().is(':checked')) {
      return html;
    }
    html += '<table>';
    $.each(sortedDiffs(diffs), (_, diff) => {
      const count = diff[propertyName];
      const td = $('<td>');
      const noneOrSome = (count === 0) ? 'none' : 'some';
      const div = $('<div>', {
        'class': `diff-${cssName}-line-count ${noneOrSome} button`,
        'data-filename': diff.filename
      });
      div.append(count);
      td.append(div);
      html += makeTr(td.html());
    });
    html += '</table>';
    return html;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const sortedDiffs = (diffs) => {
    let filenames = [];
    $.each(diffs, (_, diff) => {
      filenames.push(diff.filename);
    });
    // ensure filenames appear in the same order as kata/edit page
    const sorted = cd.sortedFilenames(filenames);
    const diffFor = (filename) => {
      for (let i = 0; i !== diffs.length; i++) {
        if (diffs[i].filename === filename) {
          return diffs[i];
        }
      }
    };
    let result = [];
    $.each(sorted, (_, filename) => {
      result.push(diffFor(filename));
    });
    return result;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const resetFilenameAddedDeletedLineCountHandlers = () => {

    const display = (node, name, value) => {
      if ($(node).attr('disabled') !== 'disabled') {
        const filename = $(node).data('filename');
        const selector = `[id="${filename}_diff_div"] ${name}`;
        $(selector).css('display', value);
      }
    };

    $('.diff-deleted-line-count')
      .clickToggle(
        function() { display(this, 'deleted', 'none' ); },
        function() { display(this, 'deleted', 'block'); }
      );

    $('.diff-added-line-count')
      .clickToggle(
        function() { display(this, 'added', 'none' ); },
        function() { display(this, 'added', 'block'); }
      );
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const buildDiffFilenameHandlers = (diffs) => {
    // Builds click handlers for all filenames for a given
    // [ kata-id, was-index, now-index] tuple.
    // When you open a new filename it auto-scrolls its first diff-chunk.
    // When you reclick a filename it auto-scrolls to its *next* diff-chunk.
    const getFilename = (node) => $.trim(node.text());
    const id = (name) => $(`[id="${name}"]`);
    const diffFileContentFor = (filename) => id(`diff_file_content_for_${filename}`);
    const diffFileDiv = (filename) => id(`${filename}_diff_div`);

    let previousFilenameNode;
    let alreadyOpened = [];

    const loadFrom = (diff) => {
      const id = diff.id;
      const filenameNode = $(`#radio_${id}`);
      const filename = getFilename(filenameNode);
      const sectionCount = diff.section_count;
      const diffSheet = diffFileContentFor(filename);
      let sectionIndex = 0;

      if (sectionCount > 0) {
        filenameNode.attr('title', 'Auto-scroll through diffs');
      }

      return () => {

        const reselected =
          previousFilenameNode !== undefined &&
            getFilename(previousFilenameNode) === filename;

        $('.diff-deleted-line-count, .diff-added-line-count').attr('disabled', true);
        $(`.diff-deleted-line-count[data-filename="${filename}"]`).attr('disabled', false);
        $(`.diff-added-line-count[data-filename="${filename}"]`).attr('disabled', false);

        cd.radioEntrySwitch(previousFilenameNode, filenameNode);

        if (previousFilenameNode !== undefined) {
          diffFileDiv(getFilename(previousFilenameNode)).hide();
        }
        diffFileDiv(getFilename(filenameNode)).show();
        previousFilenameNode = filenameNode;
        param.filename = filename;

        if (sectionCount > 0 && (reselected || !cd.inArray(filename, alreadyOpened))) {
          const section = $(`#${id}_section_${sectionIndex}`);
          const downFromTop = 250;
          const halfSecond = 500;
          diffSheet.animate({
            scrollTop: '+=' + (section.offset().top - downFromTop) + 'px'
          }, halfSecond);
          sectionIndex += 1;
          sectionIndex %= sectionCount;
        }
        alreadyOpened.push(filename);
      };
    }; // loadFrom()

    $.each(diffs, (_n, diff) => {
      const filename = $(`#radio_${diff.id}`);
      filename.click(loadFrom(diff));
    });
  }; // buildDiffFilenameHandlers()

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const makeDiffContent = (diffs) => {
    const holder = $('<span>');
    $.each(diffs, (_, diff) => {
      const table = $('' +
        `<div id="${diff.filename}_diff_div" class="filename_div">` +
        '<table>' +
          '<tr class="valign-top">' +
            makeTd('<div class="diff-line-numbers"></div>') +
            makeTd(`<div id="diff_file_content_for_${diff.filename}"` +
                   ' class="diff-sheet"></div>') +
          '</tr>' +
        '</table>' +
        '</div>'
        );
      const content = $('.diff-sheet', table);
      const numbers = $('.diff-line-numbers', table);
      content.html(diff.content);
      numbers.html(diff.line_numbers);
      bindLineNumberScrolling(content, numbers);
      holder.append(table);
    });
    return holder;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const bindLineNumberScrolling = ($content, $numbers) => {
    const synchScroll = () => {
      $numbers.scrollTop($content.scrollTop());
    };
    $content.bind({
      keydown   : synchScroll,
      scroll    : synchScroll,
      mousewheel: synchScroll,
      mousemove : synchScroll,
      mousedown : synchScroll,
      mouseup   : synchScroll
    });
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const showFile = (filenameId) => {
    const filename =  $(`#radio_${filenameId}`);
    filename.click()
            .scrollIntoView({ direction: 'vertical' });
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const reviewRefresh = () => {
    const reviewParams = {
                id: param.id,
         was_index: param.wasIndex,
         now_index: param.nowIndex,
          filename: param.filename
    };
    $('.ui-dialog').addClass('busy');
    $.getJSON('/differ/diff', reviewParams, (data) => {
      $('.ui-dialog').removeClass('busy');
      param = data;
      refreshDiffCheckBox(); // must refresh first
      refreshTrafficLights();
      refreshEventControls();
      refreshFiles();
      refreshForkButton();
      refreshRevertButton();
      refreshDownloadButton();
      const rag = $('img[src $= "_bar.png"]');
      const options = { direction: 'horizontal', duration: 'slow' };
      rag.scrollIntoView(options);
    });
  };

  //-----------------------------------------
  // refresh [fork]
  //-----------------------------------------

  const refreshForkButton = () => {
    const button = $('#fork-button');
    cd.setTip(button, () => {
      const tip = `setup a new session from ${param.avatarName} ${param.nowIndex}`;
      cd.showHoverTip(button, tip);
    });
  };

  //-----------------------------------------
  // refresh [revert] (from dialog only)
  //-----------------------------------------

  const refreshRevertButton = () => {
    const button = $('#revert-button');
    cd.setTip(button, () => {
      const tip = `revert to ${param.avatarName} ${param.nowIndex}`;
      cd.showHoverTip(button, tip);
    });
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const doRevert = () => {
    const revertParams = {
          id: param.id,
       index: param.nowIndex
    };
    $.getJSON('/reverter/revert', revertParams, (data) => {
      $('#review-dialog').dialog('close');
      deleteAllNonOutputFiles();
      insertNewFiles(data.visibleFiles);
      $('#test-button').click();
    });
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const deleteAllNonOutputFiles = () => {
    cd.eachFilename((filename) => {
      if (!isOutputFile(filename)) {
        cd.fileDelete(filename);
      }
    });
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const isOutputFile = (filename) => {
    return ['stdout','stderr','status'].includes(filename);
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const insertNewFiles = (files) => {
    for (const filename in files) {
      cd.fileCreate(filename, { content:files[filename] });
    }
  };

  //-----------------------------------------
  // refresh [download]
  //-----------------------------------------

  const refreshDownloadButton = () => {
    const button = $('#download-button');
    // zipper is not upgraded to the new saver format
    // and it's better to ship without it for now.
    button.hide();
    cd.setTip(button, () => {
      const tip = `download files from ${param.avatarName} ${param.nowIndex}`;
      cd.showHoverTip(button, tip);
    });
  };

  const doDownload = () => {
    const url = `/download_tag/${param.id}/${param.nowIndex}`;
    window.location = url;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const setupButton = (name, handler) => {
    const button = `<button id="${name}-button" type="button"></button>`;
    $(`#${name}-button-container`).html(button);
    $(`#${name}-button`)
      .text(name)
      .unbind('click')
      .bind('click', handler);
    if (name === 'download') { refreshDownloadButton(); }
    if (name === 'fork'    ) { refreshForkButton();     }
    if (name === 'revert'  ) { refreshRevertButton();   }
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -

  const makeTr = (html) => `<tr>${html}</tr>`;
  const makeTd = (html) => `<td>${html}</td>`;

  // - - - - - - - - - - - - - - - - - - - - - - - -

  if (inDialog) {
    setupButton('revert', () => doRevert());
    setupButton('close',  () => $('#review-dialog').dialog('close'));
  } else {
    reviewRefresh();
  }
  setupButton('download', () => doDownload());
  setupButton('fork',     () => cd.forkDialog(param.id, param.nowIndex));

});

//--></script>

<%= render(:partial => 'shared/extension_filenames') %>
<%= render(:partial => 'review/buttons') %>

<table>
  <tr valign="top">
    <td align="right" style="width:300px" rowspan="2">
      <%= render(:partial => 'review/navigate_control') %>
      <%= render(:partial => 'review/diff_checkbox') %>
      <div id="diff-filenames"></div>
    </td>
    <td>
      <div id="review-traffic-lights"></div>
    </td>
  </tr>
  <tr valign="top">
    <td>
      <div id="diff-content"></div>
    </td>
  </tr>
</table>

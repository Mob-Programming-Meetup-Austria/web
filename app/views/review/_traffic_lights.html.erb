<script type="text/javascript"><!--
'use strict';
$(() => {

  const review = cd.review;

  review.refreshTrafficLights = (params) => {
    const args = { id:params.id };
    review.waitSpinnerGetJSON('/model/kata_events', args, (data) => {
      refreshTrafficLightsCallback(data.kata_events);
    });
  };

  const refreshTrafficLightsCallback = (events) => {
    const trafficLights = $('#review-traffic-lights');
    trafficLights.html(makeTrafficLightsHtml(events));
    let wasIndex = 0;
    $.each($('.diff-traffic-light', trafficLights), (_, light) => {
      const $light = $(light);
      const nowIndex = $light.data('index');
      $light.click(() => review.moveToTrafficLight(nowIndex));
      cd.setupTrafficLightTip2($light, review.params.id, wasIndex, nowIndex, review.params.avatarIndex);
      wasIndex = nowIndex;
    });
    review.refreshTrafficLightsNavigator(events);
    scrollCurrentTrafficLightIntoView();
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  review.moveToTrafficLight = (index) => {
    const delta = review.inDiffMode() ? 1 : 0;
    review.params.nowIndex = index;
    review.params.wasIndex = index - delta;
    review.refresh();
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const makeTrafficLightsHtml = (events) => {
    let html = '';
    events.forEach((event,number) => {
      if (isVisible(event)) {
        html += makeTrafficLightHtml(event, number);
      }
    });
    return html;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const isVisible = (event) => {
    // Eg don't show event[0] == creation
    switch (event.colour) {
    case 'pulling':
    case 'red':
    case 'amber':
    case 'green':
    case 'timed_out':
    case 'faulty':
      return true;
    default:
      return false;
    }
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const makeTrafficLightHtml = (light, number) => {
    return '' +
      `${makeRevertCircle(light)}
       ${makePredictCircle(light)}
       <div class="diff-traffic-light"
         data-id="${review.params.id}"
         data-number="${number}"
         data-colour="${light.colour}"
         data-index="${light.index}">
         <img src="/images/traffic-light/${light.colour}.png"/>
        ${makeTrafficLightMarkerHtml(light)}
      </div>`;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const makeRevertCircle = (light) => {
    if (isRevert(light)) {
      return '<img class="revert" src="/images/traffic-light/circle-revert.png">';
    } else {
      return '';
    }
  };
  const isRevert = (light) => light.revert != undefined;

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const makePredictCircle = (light) => {
    if (isPredict(light)) {
      const correct = (light.predicted === light.colour);
      const icon = correct ? 'tick' : 'cross';
      return `<img class="${icon}" src="/images/traffic-light/circle-${icon}.png">`;
    } else {
      return '';
    }
  };
  const isPredict = (light) => light.predicted != undefined && light.predicted != 'none';

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const makeTrafficLightMarkerHtml = (light) => {
    const currentIndex = (review.params.nowIndex == light.index);
    if (currentIndex) {
      return `<img id='traffic-light-marker'
                   src='/images/traffic-light/marker_${light.colour}.png'/>`;
    } else {
      return '';
    }
  };

  // - - - - - - - - - - - - - - - - - - - - - - - -
  const scrollCurrentTrafficLightIntoView = () => {
    // refreshTrafficLights() has updated the dom with a $('#traffic-light-marker')
    // I cannot find a nice way to access it once the dom is ready. So this :-(
    const quarterSecond = 250;
    const scroller = () => {
      $('#traffic-light-marker').scrollIntoView({
        direction:'horizontal',
        duration:'slow'
      });
    };
    setTimeout(scroller, quarterSecond);
  };

});
//--></script>

<div id="review-traffic-lights"></div>

<script type="text/javascript"><!--
'use strict';
$(() => {

  cd.review.pick_file = (diffs, currentFilename, exts) => {
    const currentFile = (diff) => diffFilename(diff) === currentFilename;

    // Rule 1
    // If the current-filename exists and has a diff, pick it.
    const r1 = diffs.find(diff => currentFile(diff) && hasChanged(diff));
    if (r1 != undefined) {
      return r1;
    }
    // Rule 2
    // If a filenameExtension file has a diff, pick the largest diff
    const r2 = diffs.filter(diff => anyExtMatches(diff, exts) && hasChanged(diff));
    const r2Sorted = r2.sort(changeCountCmp);
    if (r2Sorted.length > 0) {
      return r2Sorted[0];
    }
    // Rule 3
    // If a non-filenameExtension has a diff, pick the largest diff
    const r3 = diffs.filter(diff => noExtMatches(diff, exts) && hasChanged(diff));
    const r3Sorted = r3.sort(changeCountCmp);
    if (r3Sorted.length > 0) {
      return r3Sorted[0];
    }
    // Rule 4
    // If there are 100% identical file renames, pick the largest
    const r4 = diffs.filter(diff => isIdenticalRename(diff));
    const r4Sorted = r4.sort(sameCountCmp);
    if (r4Sorted.length > 0) {
      return r4Sorted[0];
    }
    // Rule 5
    // If there is a deleted file, pick the largest
    const r5 = diffs.filter(diff => diff.type === 'deleted');
    const r5Sorted = r5.sort(changeCountCmp);
    if (r5Sorted.length > 0) {
      return r5[0];
    }
    // Rule 6
    // If the current-filename exists, pick it
    const r6 = diffs.find(diff => currentFile(diff));
    if (r6 != undefined) {
      return r6;
    }
    // Rule 7
    // Pick cyber-dojo.sh (which cannot be deleted)
    const r7 = diffs.find(diff => diffFilename(diff) === 'cyber-dojo.sh');
    return r7;
  };

  const diffFilename = (diff) => {
    if (isDeleted(diff)) {
      return diff.old_filename;
    } else {
      return diff.new_filename;
    }
  };

  const anyExtMatches = (diff, exts) => {
    return extMatches(diff, exts) != undefined;
  };

  const noExtMatches = (diff, exts) => {
    return extMatches(diff, exts) === undefined;
  };

  const extMatches = (diff, exts) => {
    return exts.find(ext => diffFilename(diff).endsWith(ext));
  };

  const hasChanged = (diff) => changeCount(diff) > 0 && !isDeleted(diff);

  const changeCountCmp = (lhs,rhs) => changeCount(rhs) - changeCount(lhs);

  const sameCountCmp = (lhs,rhs) => rhs.line_counts.same - lhs.line_counts.same;

  const changeCount = (diff) => {
    return diff.line_counts.added + diff.line_counts.deleted;
  };

  const isDeleted = (diff) => diff.type === 'deleted';

  const isIdenticalRename = (diff) => {
    return diff.type === 'renamed' &&
      diff.line_counts.added === 0 &&
        diff.line_counts.deleted === 0;
  };

});
//--></script>

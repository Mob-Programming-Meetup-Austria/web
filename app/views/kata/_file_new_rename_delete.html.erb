
<script type="text/javascript"><!--

$(() => {

  const fileButtons = $('#file-operations');

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  fileButtons.find('#new').click(() => {
    const initialFilename = 'filename' + cd.extensionFilenames()[0];
    const okInitiallyDisabled = !isValidFilename(initialFilename);
    const okClicked = (filename) => {
      cd.newFileContent(filename, '');
    };
    openDialog('new', initialFilename, okInitiallyDisabled, okClicked);
  });

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  fileButtons.find('#rename').click(() => {
    const initialFilename = cd.currentFilename();
    const okInitiallyDisabled = true;
    const okClicked = (filename) => {
      renameFileFromTo(initialFilename, filename);
    };
    openDialog('rename', initialFilename, okInitiallyDisabled, okClicked);
  });

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  fileButtons.find('#delete').click(() => {
    const initialFilename = cd.currentFilename();
    const okInitiallyDisabled = false;
    const okClicked = (filename) => {
      cd.deleteFile(filename);
    };
    openDialog('delete', initialFilename, okInitiallyDisabled, okClicked);
  });

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  const openDialog = function(name, initialFilename, okInitiallyDisabled, okClicked) {
    const input = makeInput(name, initialFilename);
    const ok = {
      text: 'ok',
      id: 'file-ok',
      disabled: okInitiallyDisabled,
      click: function() {
        const newFilename = $.trim(input.val());
        okClicked(newFilename);
        $(this).remove();
        cd.editorRefocus();
      }
    };
    const cancel = {
      text: 'cancel',
      click: function() {
        $(this).remove();
        cd.editorRefocus();
      }
    };
    const div = $('<div>');
    div.append(input);
    const fileOperationDialog = div.dialog({
      closeOnEscape: true,
      close: function() {
        $(this).remove();
        cd.editorRefocus();
      },
  	  title: cd.dialogTitle(name + '&nbsp;file'),
    	autoOpen: false,
      width: 250,
  	  modal: true,
      buttons: [ ok, cancel ],
      beforeClose: function(event) {
        if (event.keyCode === $.ui.keyCode.ESCAPE) {
          $(this).remove();
          cd.editorRefocus();
          return true;
        }
      }
    });
  	input.keyup((event) => {
      const ok = $('#file-ok');
      const newFilename = $.trim(input.val());
      event.preventDefault();
      if (isValidFilename(newFilename))  {
        ok.button('enable');
        if (event.keyCode == $.ui.keyCode.ENTER) {
          okClicked(newFilename);
          ok.closest('.ui-dialog').remove();
          cd.editorRefocus();
        }
      } else {
        ok.button('disable');
      }
    });
    const lastDot = initialFilename.lastIndexOf('.');
    const end = (lastDot != -1) ? lastDot : initialFilename.length;
    input[0].setSelectionRange(0, end);
    fileOperationDialog.dialog('open');
  };

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  const makeInput = (name, filename) => {
    const input = $('<input>', {
      type: 'text',
      id: name+'-filename',
      'name': name+'-filename',
      value: filename
    });
    if (name == 'delete') {
      input.attr('disabled', 'disabled');
    }
    return input;
  };

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  const renameFileFromTo = (oldFilename, newFilename) => {
    cd.saveCodeFromIndividualSyntaxHighlightEditor(oldFilename);
    const oldFile = cd.fileContentFor(oldFilename);
    const content = oldFile.val();
    //const scrollTop = oldFile.scrollTop();
    //const scrollLeft = oldFile.scrollLeft();
    //const caretPos = oldFile.caret();
    cd.fileDiv(oldFilename).remove();
    cd.newFileContent(newFilename, content);
    cd.rebuildFilenameList();
    cd.loadFile(newFilename);
  };

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  const isValidFilename = (filename) => {
    const contains = (illegal) => { return filename.indexOf(illegal) != -1; };
    if (cd.filenameAlreadyExists(filename)) { return false; }
    if (contains('..')) { return false; }
    if (contains('\\')) { return false; }
    if (contains(' '))  { return false; }
    if (filename == '') { return false; }
    return true;
  };

});

//--></script>

<div id="file-operations">
  <div><button type="button" id="new">new&nbsp;file</button></div>
  <div><button type="button" id="rename">rename&nbsp;file</button></div>
  <div><button type="button" id="delete">delete&nbsp;file</button></div>
</div>

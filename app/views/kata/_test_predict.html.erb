
<script type="text/javascript">
'use strict';
$(() => {

  const predicted = $('input[name=predicted]');

  cd.predict = {
    reset:() => {
      const predict = cd.settings.predict();
      if (predict === 'off') {
        cd.countPredictBox().hide();
        circleImages().hide();
      } else {
        cd.updateTrafficLightsCount();
        cd.countPredictBox().show();
        circleImages().show();
      }
    }
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  cd.predictTrafficLight = (runTests) => {
    // Called from the test-button handler
    predicted.val('none');
    if (cd.settings.predict() === 'on') {
      openPredictionDialog(runTests);
    } else {
      runTests();
    }
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  cd.checkout = (args) => {
    // eg args = { src_id:'Xd4f2P', src_index:17 };
    args.id = cd.kataId();
    args.index = cd.getIndex();
    $.post('/reverter/revert', args, (data) => {
      cd.kata.editor.deleteFiles();
      for (const filename in data.files) {
        cd.kata.editor.createFile(filename, { content:data.files[filename] });
        cd.kata.editor.showFile(filename);
      }
      cd.kata.editor.output(data.stdout.content, data.stderr.content, data.status);
      cd.kata.tabs.output().click();
      cd.kata.filenames.refresh();
      cd.appendTrafficLight(data.light);
      cd.updateTrafficLightsCount();
      cd.updateIndex(data.light.index);
      cd.scrollLastTrafficLightIntoView();
    }, 'json');
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const circleImages = () => {
    const cssSelector = [
      '#traffic-lights img.revert',
      '#traffic-lights img.tick',
      '#traffic-lights img.cross',
    ].join(',');
    return $(cssSelector);
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const openPredictionDialog = (runTests) => {
    const html = '<div>' + predictButtons() + predictInfo() + '</div>';
    const $node = $(html);
    setupButtonClick(runTests, $node, 'red');
    setupButtonClick(runTests, $node, 'amber');
    setupButtonClick(runTests, $node, 'green');
    setupAutoRevertCheckBox($node, 'red');
    setupAutoRevertCheckBox($node, 'amber');
    setupAutoRevertCheckBox($node, 'green');

    const originator = cd.testButton;
    const xPos = originator.offset().left;
    const yPos = originator.offset().top + 37;
    $node.dialog({
              width: 350,
           position: [xPos,yPos],
           autoOpen: true,
      closeOnEscape: true,
              modal: true,
              title: cd.dialogTitle('prediction'),
              close: () => $node.dialog('destroy'),
        beforeClose: event => {
          if (event.keyCode === $.ui.keyCode.ESCAPE) {
            return true;
          }
        }
    });
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const setupAutoRevertCheckBox = ($node, colour) => {
    const $checkbox = $(`#${colour}-revert-checkbox`, $node);
    $checkbox
      .prop('checked', autoRevert[colour])
      .change(() => autoRevert[colour] = $checkbox.prop('checked'));
    cd.createTip($checkbox,
      `auto-revert when<br/>
       prediction == <span class="${colour}">${colour}</span><br/>
       actual != <span class="${colour}">${colour}</span>`
    );
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const setupButtonClick = (runTests, $node, colour) => {
    $(`button.predict.${colour}`, $node).click(() => {
      $node.remove();
      predicted.val(colour);
      const $oldLast = $lastTrafficLight();
      runTests(() => testRunComplete(colour, $oldLast));
    });
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const testRunComplete = (predictedColour, $oldLast) => {
    const $newLast = $lastTrafficLight();
    const actualColour = $newLast.data('colour');
    const predictedWrong = (actualColour != predictedColour);
    const autoRevertOn = autoRevert[predictedColour];
    const lightToRevertTo = ($oldLast != undefined);
    if (predictedWrong && autoRevertOn && lightToRevertTo) {
      const srcIndex = $oldLast.data('index');
      cd.checkout({ src_id:cd.kataId(), src_index:srcIndex });
    }
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const $lastTrafficLight = () => {
    return $('#traffic-lights .diff-traffic-light').last();
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const autoRevert = {
      red:false,
    amber:false,
    green:false
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const predictButtons = () => {
    let html = '';
    html += '<table>';
    html += predictRow('red',   predictButton('red',   'some tests will fail'));
    html += predictRow('amber', predictButton('amber', 'the tests wont run yet'));
    html += predictRow('green', predictButton('green', 'all the tests will pass'));
    html += '</table>';
    return html;
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const predictRow = (colour, button) =>
    `<tr>
      <td>${button}</td>
      <td class="predict">${predictCheckbox(colour)}</td>
    </tr>`;

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const predictButton = (colour, text) =>
    `<button class="predict ${colour}">
      ${text}
     </button>`;

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const predictCheckbox = (rag) =>
    `<input type="checkbox" id="${rag}-revert-checkbox"/>
     <label for="${rag}-revert-checkbox"></label>`;

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const predictInfo = () => {
    return '' +
      `<div class="predict info">
        When a checkbox is ticked, an incorrect prediction will be automatically reverted!
       </div>
       <div class="predict info">
         Examples:
         <table>
           <tr>
             <td>
               <img class="cross" src="/traffic-light/image/circle-cross.png">
               <img src="/traffic-light/image/amber.png">
             </td>
             <td>
               incorrectly predicted <span class="red">red</span> or <span class="green">green</span>
             </td>
           </tr>
           <tr>
             <td class="text-align:right;">
               <img class="tick" src="/traffic-light/image/circle-tick.png">
               <img src="/traffic-light/image/green.png">
             </td>
             <td>
               correctly predicted <span class="green">green</span>
             </td>
           </tr>
           <tr>
             <td>
               <img class="revert" src="/traffic-light/image/circle-revert.png">
               <img src="/traffic-light/image/red.png">
             </td>
             <td>
               auto-reverted back to <span class="red">red</span>
             </td>
           </tr>
         </table>
       </div>`;
  };

});
</script>

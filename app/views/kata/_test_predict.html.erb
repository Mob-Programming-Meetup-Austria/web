
<script type="text/javascript">
'use strict';
$(() => {

  const predicted = $('input[name=predicted]');

  cd.predict = {
    reset:() => {
      const predict = cd.settings.predict();
      if (predict === 'off') {
        cd.countPredictBox().hide();
      } else {
        cd.updateTrafficLightsCount();
        cd.countPredictBox().show();
      }
    }
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  cd.predictTrafficLight = (handler) => {
    // Called from the test-button handler
    if (cd.settings.predict() === 'on') {
      predicted.val('none');
      openPredictionDialog(handler);
    } else {
      handler();
    }
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  cd.checkout = (args) => {
    // eg args = { src_id:'Xd4f2P', src_index:17 };
    args.id = cd.kataId();
    args.index = cd.getIndex();
    $.post('/reverter/revert', args, (data) => {
      cd.kata.editor.deleteFiles();
      for (const filename in data.files) {
        cd.kata.editor.createFile(filename, { content:data.files[filename] });
        cd.kata.editor.showFile(filename);
      }
      cd.kata.editor.output(data.stdout.content, data.stderr.content, data.status);
      cd.kata.tabs.output().click();
      cd.kata.filenames.refresh();
      cd.appendTrafficLight(data.light);
      cd.updateTrafficLightsCount();
      cd.updateIndex(data.light.index);
      cd.scrollLastTrafficLightIntoView();
    }, 'json');
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const openPredictionDialog = (handler) => {
    const html = '<div>' + tcrInput() + tcrInfo() + '</div>';
    const $node = $(html);
    $('.tcr', $node).show();
    setupRagClick(handler, $node, 'red');
    setupRagClick(handler, $node, 'amber');
    setupRagClick(handler, $node, 'green');
    setupBlurbClick(handler, $node, 'red');
    setupBlurbClick(handler, $node, 'amber');
    setupBlurbClick(handler, $node, 'green');
    setupTcrCheckBox($node, 'red');
    setupTcrCheckBox($node, 'amber');
    setupTcrCheckBox($node, 'green');

    const originator = cd.testButton;
    const xPos = originator.offset().left;
    const yPos = originator.offset().top + 37;
    $node.dialog({
              width: 370,
           position: [xPos,yPos],
           autoOpen: true,
      closeOnEscape: true,
              modal: true,
              title: cd.dialogTitle('prediction'),
              close: () => $node.dialog('destroy'),
        beforeClose: event => {
          if (event.keyCode === $.ui.keyCode.ESCAPE) {
            return true;
          }
        }
    });
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const setupTcrCheckBox = ($node, colour) => {
    const $checkbox = $(`#${colour}-tcr-checkbox`, $node);
    $checkbox
      .prop('checked', tcr[colour])
      .change(() => tcr[colour] = $checkbox.prop('checked'));
    cd.createTip($checkbox,
      `auto-revert when<br/>
       prediction == <span class="${colour}">${colour}</span><br/>
       actual != <span class="${colour}">${colour}</span>`
    );
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const setupRagClick = (handler, $node, colour) => {
    $(`div#predict-${colour}`, $node).click(() => {
      $node.remove();
      predicted.val(colour);
      const $oldLast = $lastTrafficLight();
      handler(() => complete(colour, $oldLast));
    });
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const setupBlurbClick = (handler, $node, colour) => {
    $(`.predict-blurb.${colour}`, $node).click(() => {
      $node.remove();
      predicted.val(colour);
      const $oldLast = $lastTrafficLight();
      handler(() => complete(colour, $oldLast));
    });
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const complete = (predictedColour, $oldLast) => {
    const $newLast = $lastTrafficLight();
    const actualColour = $newLast.data('colour');
    const predictedWrong = (actualColour != predictedColour);
    const revertOn = tcr[predictedColour];
    const lightToRevertTo = ($oldLast != undefined);
    if (predictedWrong && revertOn && lightToRevertTo) {
      const srcIndex = $oldLast.data('index');
      cd.checkout({ src_id:cd.kataId(), src_index:srcIndex });
    }
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const $lastTrafficLight = () => {
    return $('#traffic-lights .diff-traffic-light').last();
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const tcr = {
      red:false,
    amber:false,
    green:false
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const tcrInput = () => {
    let html = '';
    html += '<table>';
    html += tcrRow('red',   blurb('red',   'some of the tests will fail'));
    html += tcrRow('amber', blurb('amber', 'the tests wont run'));
    html += tcrRow('green', blurb('green', 'all of the tests will pass'));
    html += '</table>';
    return html;
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const tcrRow = (rag, blurb) =>
    '<tr>' +
      `<td>${lightImg(rag)}</td>` +
      `<td>${blurb}</td>` +
      `<td class="tcr">${tcrCheckbox(rag)}</td>` +
    '</tr>';

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const blurb = (colour, text) => `<div class="predict-blurb ${colour}">${text}</div>`;

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  // kata.scss provides background image with custom :hover
  const lightImg = (rag) => `<div class="predict" id="predict-${rag}"></div>`;

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const tcrCheckbox = (rag) => {
    return '' +
      `<input type="checkbox" id="${rag}-tcr-checkbox"/>` +
      `<label for="${rag}-tcr-checkbox"></label>`;
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const tcrInfo = () => {
    return '' +
      '<div id="tcr" class="tcr info">' +
        'When a checkbox is ticked, an incorrect prediction will be automatically reverted!' +
      '</div>' +
      '<div id="tcr" class="tcr info">' +
        'Traffic-lights will look like this:' +
        '<table>' +
          '<tr>' +
            '<td>' +
              '<img src="/traffic-light/image/circle-cross.png">' +
              '<img src="/traffic-light/image/amber_predicted_none.png">' +
            '</td>' +
            '<td>' +
              'incorrectly predicted <span class="red">red</span> or <span class="green">green</span>' +
            '</td>' +
          '</tr>' +
          '<tr>' +
            '<td class="text-align:right;">' +
              '<img src="/traffic-light/image/circle-tick.png">' +
              '<img src="/traffic-light/image/green_predicted_none.png">' +
            '</td>' +
            '<td>' +
              'correctly predicted <span class="green">green</span>' +
            '</td>' +
          '</tr>' +
          '<tr>' +
            '<td>' +
              '<img src="/traffic-light/image/circle-revert.png">' +
              '<img src="/traffic-light/image/red_predicted_none.png">' +
            '</td>' +
            '<td>' +
              'auto-reverted back to <span class="red">red</span>' +
            '</td>' +
          '</tr>' +
        '</table>' +
      '</div>';
  };

});
</script>

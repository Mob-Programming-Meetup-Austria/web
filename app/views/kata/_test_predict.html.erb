
<script type="text/javascript">
'use strict';
$(() => {

  const predicted = $('input[name=predicted]');

  cd.predict = {
    reset:() => {
      const predict = cd.settings.predict();
      if (predict === 'off') {
        cd.countPredictBox().hide();
      } else {
        cd.updateTrafficLightsCount();
        cd.countPredictBox().show();
      }
    }
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  cd.predictTrafficLight = (handler) => {
    // Called from the test-button handler
    if (cd.settings.predict() === 'on') {
      predicted.val('none');
      openPredictionDialog(handler);
    } else {
      handler();
    }
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  cd.checkout = (args) => {
    // eg args = { src_id:'Xd4f2P', src_index:17 };
    args.id = cd.kataId();
    args.index = cd.getIndex();
    $.post('/reverter/revert', args, (data) => {
      cd.kata.editor.deleteFiles();
      for (const filename in data.files) {
        cd.kata.editor.createFile(filename, { content:data.files[filename] });
        cd.kata.editor.showFile(filename);
      }
      cd.kata.editor.output(data.stdout.content, data.stderr.content, data.status);
      cd.kata.tabs.output().click();
      cd.kata.filenames.refresh();
      cd.appendTrafficLight(data.light);
      cd.updateTrafficLightsCount();
      cd.updateIndex(data.light.index);
      cd.scrollLastTrafficLightIntoView();
    }, 'json');
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const openPredictionDialog = (handler) => {
    let html = '';
    html += '<div>'
    html += '<table>';
    html += tcrRow('red',   blurb('red',   'some tests will fail'   ));
    html += tcrRow('amber', blurb('amber', 'the tests wont run yet' ));
    html += tcrRow('green', blurb('green', 'all the tests will pass'));
    html += '</table>';
    html += tcrInfo();
    html += '</div>';
    const $node = $(html);
    if (cd.trafficLightsCount(['red','amber','green']) > 0) {
      $('.tcr', $node).show();
    }
    setupRagClick(handler, $node, 'red');
    setupRagClick(handler, $node, 'amber');
    setupRagClick(handler, $node, 'green');
    setupBlurbClick(handler, $node, 'red');
    setupBlurbClick(handler, $node, 'amber');
    setupBlurbClick(handler, $node, 'green');
    setupTcrCheckBox($node, 'red');
    setupTcrCheckBox($node, 'amber');
    setupTcrCheckBox($node, 'green');

    const originator = cd.testButton;
    const xPos = originator.offset().left;
    const yPos = originator.offset().top + 37;
    $node.dialog({
              width: 305,
           position: [xPos,yPos],
           autoOpen: true,
      closeOnEscape: true,
              modal: true,
              title: cd.dialogTitle('predict'),
              close: () => $node.dialog('destroy'),
        beforeClose: event => {
          if (event.keyCode === $.ui.keyCode.ESCAPE) {
            return true;
          }
        }
    });
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const setupTcrCheckBox = ($node, colour) => {
    const $checkbox = $(`#${colour}-tcr-checkbox`, $node);
    $checkbox
      .prop('checked', tcr[colour])
      .change(() => tcr[colour] = $checkbox.prop('checked'));
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const setupRagClick = (handler, $node, colour) => {
    $(`div#predict-${colour}`, $node).click(() => {
      $node.remove();
      predicted.val(colour);
      handler(() => complete(colour));
    });
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const setupBlurbClick = (handler, $node, colour) => {
    $(`.predict-blurb.${colour}`, $node).click(() => {
      $node.remove();
      predicted.val(colour);
      handler(() => complete(colour));
    });
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const complete = (colour) => {
    if (tcr[colour]) {
      // TODO:
      // o) get colour of last traffic-light
      // o) compare to colour arg
      // o) if different then revert
    }
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const tcr = {
      red:false,
    amber:false,
    green:false
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const blurb = (colour, text) => `<div class="predict-blurb ${colour}">${text}</div>`;

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const tcrRow = (rag, blurb) =>
    '<tr>' +
      `<td>${lightImg(rag)}</td>` +
      `<td>${blurb}</td>` +
      `<td class="tcr">${tcrCheckbox(rag)}</td>` +
    '</tr>';

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  // kata.scss provides background image with custom :hover
  const lightImg = (rag) => `<div class="predict" id="predict-${rag}"></div>`;

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const tcrCheckbox = (rag) => {
    return '' +
      `<input type="checkbox" id="${rag}-tcr-checkbox"/>` +
      `<label for="${rag}-tcr-checkbox"></label>`;
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const tcrInfo = () => {
    return '' +
      '<div id="tcr" class="tcr info">' +
        'The checkboxes are a form of<br/>' +
        '<a href="https://medium.com/@kentbeck_7670/test-commit-revert-870bbd756864" target="_blank">' +
        'Test &amp;&amp; Commit || Revert</a>.<br/>' +
        'When checked, an incorrect prediction will be automatically reverted!' +
      '</div>';
  };


});
</script>

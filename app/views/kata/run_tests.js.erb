'use strict';

(() => {

  const editor = cd.kata.editor;

  const insertCreatedFiles = () => {
    <% @created.each do |filename,file| %>
      editor.createFile("<%= j raw(filename) %>", {
        content: "<%= j raw(file['content']) %>"
      });
    <% end %>
  };

  const removeDeletedFiles = () => {
    // cyber-dojo.sh cannot be deleted in the browser
    // but it can be deleted inside the container
    // and that will come back to here...
    <% @deleted.each do |filename| %>
      if ("<%= j raw(filename) %>" !== 'cyber-dojo.sh') {
        editor.deleteFile("<%= j raw(filename) %>");
      }
    <% end %>
  };

  const updateChangedFiles = () => {
    <% @changed.each do |filename,file| %>
      editor.changeFile("<%= j raw(filename) %>", {
        content: "<%= j raw(file['content']) %>"
      });
    <% end %>
  };

  const updateOutput = () => {
    const colour = "<%= @light['colour'] %>";
    const stdout = "<%= j raw(@stdout['content']) %>";
    const stderr = "<%= j raw(@stderr['content']) %>";
    const status = "<%= j raw(@status.to_s) %>";
    const editor = cd.kata.editor;
    const tabs = cd.kata.tabs;
    editor.changeFile('stdout', { content: stdout });
    editor.changeFile('stderr', { content: stderr });
    editor.changeFile('status', { content: status });
    const empty = (s) => s.length === 0;
    switch (colour) {
      case 'timed_out':
      case 'faulty':
        tabs.status().click();
        break;
      case 'red':
      case 'green':
        if (!empty(stdout) || empty(stderr)) {
          tabs.stdout().click();
        } else {
          tabs.stderr().click();
        }
        break;
      case 'amber':
        if (stdout.length > stderr.length) {
          tabs.stdout().click();
        } else {
          tabs.stderr().click();
        }
        break;
    }
  };

  //- - - - - - - - - - - - - - - - - - - - - -
  const warnIfTestsTimedOut = () => {
    if ("<%= @light['colour'] %>" === 'timed_out') {
      const maxSeconds = $('input[name="max_seconds"]').val();
      const info = [
        `Unable to complete the tests in ${maxSeconds} seconds.`,
        'Is there an accidental infinite loop?'
      ].join("\n");
      const html = $('<textarea>', {
        'data-width':345,
                'id':'timed-out',
          'readonly':'readonly'
      }).val(info);
      cd.dialog(html, 'timed out', 'close').dialog('open');
    }
  };

  //- - - - - - - - - - - - - - - - - - - - - -
  const warnIfTrafficLightFaulty = () => {
    if ("<%= @light['colour'] %>" === 'faulty') {
      const info = `<%= raw @diagnostic %>`;
      const html = $('<textarea>', {
         'data-width':600,
                 'id':'faulty',
           'readonly':'readonly'
      }).val(info);
      cd.dialog(html, 'faulty traffic-light', 'close').dialog('open');
    }
  };

  //- - - - - - - - - - - - - - - - - - - - - -
  const updateTrafficLights = () => {
    cd.appendTrafficLight(<%= raw @light.to_json %>);
    cd.updateTrafficLightsCount();
  }

  //- - - - - - - - - - - - - - - - - - - - - -
  const updateFilenames = () => {
    cd.kata.filenames.refresh();
  };

  //- - - - - - - - - - - - - - - - - - - - - -
  const showWarnings = () => {
    warnIfTestsTimedOut();
    warnIfTrafficLightFaulty();
    //warnIfTruncatedFiles();
  };

  //- - - - - - - - - - - - - - - - - - - - - -
  updateTrafficLights();
  insertCreatedFiles();
  removeDeletedFiles();
  updateChangedFiles();
  updateFilenames();
  updateOutput(); // [stdout,stderr,status] Must be last
  showWarnings();
  cd.scrollLastTrafficLightIntoView();

})();

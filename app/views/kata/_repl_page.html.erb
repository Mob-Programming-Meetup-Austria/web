
<button class="resume-button" type="button">resume</button>
<div id="repl-terminal"></div>

<script type="text/javascript">
'use strict';
$(() => {

  const kataPage = $('#kata-page');
  const replPage = $('#repl-page');
  const resumeButton = $('.resume-button', replPage);
  const kataId = "<%= @kata.id %>";
  const replUrl = () => `${location.hostname}/repler/${kataId}-${sessionId}`;
  let sessionId = null;

  cd.openReplPage = () => {
    kataPage.fadeOut('slow', () => {
      replPage.fadeIn('slow', () => {
        replInit();
      });
    });
  };

  const closeReplPage = () => {
    replPage.fadeOut('slow', () => {
      kataPage.fadeIn('slow', () => {
        replFini();
      });
    });
  };

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  const replInit = () => {
    // Trying to put Terminal inside a jQuery dialog is, empirically,
    // very tricksy (because of CSS z-Index issues I think).
    cd.saveCodeFromSyntaxHighlightEditors();
    setSessionId();
    const element = document.getElementById('repl-terminal');
    const terminal = createTerminalIn(element);
    const repl = new Repl(terminal);
    repl.create().then(() => {
      const socket = new WebSocketMonitor(terminal);
      socket.open();
      resumeButton.unbind().click(() => {
        socket.close();
        repl.delete();
        closeReplPage();
      });
    });
  };

  const replFini = () => {
    // Empty the dom element so next [repl] click is clean.
    $('#repl-terminal').empty();
  };

  const setSessionId = () => {
    // If the repl docker container's id was based *only* on the kata-id,
    // then creating a new repl could  fail if there was a very recent
    // [resume], which caused a repl DELETE request, but the docker daemon
    // had not yet actually deleted the repl container.
    // So the repl and socket Urls for a repl session have a random suffix.
    sessionId = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0,6);
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  function WebSocketMonitor(terminal) {
    this.url = `ws://${replUrl()}`;
    this.terminal = terminal;
  };

  WebSocketMonitor.prototype.open = function() { //url, terminal) {
    const that = this;
    this.socket = new WebSocket(this.url);
    this.socket.onopen = function(_event) {
      that.terminal.greenWriteln('Opening WebSocket');
      that.terminal.attach(that.socket);
      that.terminal._initialize = true;
    };
    this.socket.onclose = function(event) {
      const NGINX_TIMEOUT_CODE = 1006;
      if (event.code === NGINX_TIMEOUT_CODE) {
        // silently restart
        that.terminal.greenWriteLn('WebSocket timed out');
        that.start();
      }
    };
    this.socket.onerror = function(event) {
      this.terminal.greenWriteln('WebSocket error');
    };
  };

  WebSocketMonitor.prototype.close = function() {
    this.terminal.greenWriteln('Closing WebSocket');
    this.terminal.detach(this.socket);
    this.socket.close(1000, 'User closed the WebSocket');
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  const createTerminalIn = (element) => {
    const terminal = new Terminal({
      cursorBlink: true,
      scrollback: 10,
      tabStopWidth: 10
    });
    Terminal.applyAddon(attach);
    Terminal.applyAddon(fit);
    Terminal.applyAddon(fullscreen);
    Terminal.applyAddon(search);
    Terminal.applyAddon(winptyCompat);
    terminal.open(element);
    terminal.winptyCompatInit();
    terminal.fit();
    terminal.focus();
    terminal.greenWriteln = (s) => {
      const greenCode = '\u001b[32m';
      const resetCode = '\u001b[0m';
      terminal.writeln(`${greenCode}${s}${resetCode}`);
      console.log(s);
    };
    return terminal;
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function Repl(terminal) {
    this.url = `http://${replUrl()}`;
    this.terminal = terminal;
  };

  Repl.prototype.create = function() {
    // Request that a REPL be created.
    // Returns the promise for the POST request.
    this.terminal.greenWriteln('Creating REPL');
    const requestParams = {
      method: 'POST',
      body: JSON.stringify($('form').serializeArray()),
      headers: { 'content-type': 'application/json' }
    };
    return fetch(this.url, requestParams);
  };

  Repl.prototype.delete = function() {
    // Request that the REPL be terminated.
    // Returns the promise for the DELETE request.
    this.terminal.greenWriteln('Deleting REPL');
    return fetch(this.url, { method: 'DELETE' });
  };

});
</script>

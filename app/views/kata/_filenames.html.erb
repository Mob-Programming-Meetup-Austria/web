
<div id="filename-list"></div>

<script type="text/javascript">
'use strict';
$(() => {

  const filenames = cd.kata.filenames;

  filenames.sorted = () => cd.sortedFilenames();
  filenames.length = () => filenames.sorted().length;
  filenames.selected = () => $('.filename.selected').text().trim();

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Filenames hot-key navigation
  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // See app/assets/javascripts/cyber-dojo_codemirror.js
  // See app/views/shared/_hotkeys.html.erb
  // Alt-J ==> selectNext()
  // Alt-K ==> selectPrevious()

  filenames.selectNext = () => selectFileInFileList(nextFilename());
  filenames.selectPrevious = () => selectFileInFileList(previousFilename());

  const nextFilename = () => filenames.sorted()[indexOfNext()];
  const indexOfNext = () => {
    const index = indexOfSelected();
    if (index === -1) {
      return 0;
    } else {
      return (index + 1) % filenames.length();
    }
  };

  const previousFilename = () => filenames.sorted()[indexOfPrevious()];
  const indexOfPrevious = () => {
    const index = indexOfSelected();
    if (index === 0 || index === -1) {
      return filenames.length() - 1;
    } else {
      return index - 1;
    }
  };
  const indexOfSelected = () => filenames.sorted().indexOf(filenames.selected());

  filenames.top = () => {
    return filenames.sorted()[0];
  };

  //= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

  let theCurrentFilename = '';

  cd.loadInitialFile = () => cd.loadFile(filenames.top());
  cd.currentFilename = () => theCurrentFilename;
  cd.editorRefocus = () => cd.loadFile(cd.currentFilename());

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Load a named file
  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  cd.unloadFile = (filename) => cd.kata.editor.hideFile(filename);

  cd.loadFile = (filename) => {
    // unshow what is currently being shown
    cd.unloadFile('stdout');
    cd.unloadFile('stderr');
    cd.unloadFile('status');
    cd.unloadFile(cd.currentFilename());

    cd.kata.editor.showFile(filename);

    cd.focusSyntaxHighlightEditor(filename);
    if (!cd.isOutputFile(filename)) {
      selectFileInFileList(filename);
      theCurrentFilename = filename;
    }
    setRenameAndDeleteButtons(filename);
    cd.kata.tabs.setFilename(filename);
  };

  const selectFileInFileList = (filename) => {
    // Can't do $('radio_' + filename) because filename
    // could contain characters that aren't strictly legal
    // characters in a dom node id so I do this instead...
    $('.filename').removeClass('selected');
    const node = $(`[id="radio_${filename}"]`); // TODO: needs to be specific to filenames
    node.addClass('selected');
    setRenameAndDeleteButtons(filename);
    cd.kata.tabs.setFilename(filename);
    theCurrentFilename = filename;
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  cd.loadTestOutputFiles = (colour, stdout, stderr, status) => {
    const editor = cd.kata.editor;
    const tabs = cd.kata.tabs;
    editor.changeFile('stdout', { content: stdout });
    editor.changeFile('stderr', { content: stderr });
    editor.changeFile('status', { content: status });
    const empty = (s) => s.length === 0;
    switch (colour) {
      case 'timed_out':
      case 'faulty':
        tabs.status().click();
        break;
      case 'red':
      case 'green':
        if (!empty(stdout) || empty(stderr)) {
          tabs.stdout().click();
        } else {
          tabs.stderr().click();
        }
        break;
      case 'amber':
        if (stdout.length > stderr.length) {
          tabs.stdout().click();
        } else {
          tabs.stderr().click();
        }
        break;
    }
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  cd.filenames = () => {
    // Gets the kata/edit page filenames. The review/show
    // page/dialog collects filenames in its own way.
    const filenames = [];
    const prefix = 'file_content_for_';
    $(`textarea[id^=${prefix}]`).each(function(_) {
      const id = $(this).attr('id');
      const filename = id.substr(prefix.length, id.length - prefix.length);
      filenames.push(filename);
    });
    return filenames;
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // cd.sortedFilenames()
  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Returns how the filenames appear in the filename list.
  // Used in two places
  // 1. kata/edit page to help show filename-list
  // 2. review/show page/dialog to help show filename-list

  cd.sortedFilenames = (filenames) => {
    if (filenames === undefined) {
      filenames = cd.filenames(); // default arg
    }
    const trueFilenames = filenames.slice().filter(filename => !cd.isOutputFile(filename));
    trueFilenames.sort(orderer);
    return trueFilenames;
  };

  const orderer = (lhs,rhs) => {
    const lhsFileCat = fileCategory(lhs);
    const rhsFileCat = fileCategory(rhs);
    if (lhsFileCat < rhsFileCat) { return -1; }
    else if (lhsFileCat > rhsFileCat) { return +1; }
    else if (lhs < rhs) { return -1; }
    else if (lhs > rhs) { return +1; }
    else { return +1; }
  };

  const fileCategory = (filename) => {
    let category = undefined;
    if (isHighlightFile(filename))    { category = 1; }
    else if (isSourceFile(filename))  { category = 2; }
    else                              { category = 3; }
    // Special cases
    if (filename === 'readme.txt')    { category = 0; }
    // Shell test frameworks (eg shunit2) use .sh as their
    // extension but cyber-dojo.sh is always lowest category
    if (filename === 'cyber-dojo.sh') { category = 3; }
    return category;
  };

  const isHighlightFile = (filename) => {
    return cd.highlightFilenames().includes(filename);
  };

  const isSourceFile = (filename) => {
    return cd.extensionFilenames().find(ext => filename.endsWith(ext));
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // new-file, rename-file, delete-file
  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  cd.fileChange = (filename, file) => {
    cd.kata.editor.changeFile(filename, file);
    // Still used in _run_tests.js.erb
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  cd.fileCreate = (filename, file) => {
    cd.kata.editor.createFile(filename, file);
    rebuildFilenameList();
    selectFileInFileList(filename);
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  cd.fileDelete = (filename) => {
    cd.kata.editor.deleteFile(filename);
    rebuildFilenameList();
    cd.kata.editor.showFile(filenames.top());
    selectFileInFileList(filenames.top());
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  cd.fileRename = (oldFilename, newFilename) => {
    cd.kata.editor.renameFile(oldFilename, newFilename);
    cd.kata.editor.showFile(newFilename);
    rebuildFilenameList();
    selectFileInFileList(newFilename);
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  const setRenameAndDeleteButtons = (filename) => {
    const disable = (node) => node.prop('disabled', true);
    const enable  = (node) => node.prop('disabled', false);
    if (cantBeRenamedOrDeleted(filename)) {
      disable(cd.renameFileButton());
      disable(cd.deleteFileButton());
    } else {
      enable(cd.renameFileButton());
      enable(cd.deleteFileButton());
    }
  };

  const cantBeRenamedOrDeleted = (filename) => {
    return cd.isOutputFile(filename) || filename === 'cyber-dojo.sh';
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  filenames.refresh = () => {
    rebuildFilenameList();
  };

  const rebuildFilenameList = () => {
    const selected = filenames.selected(); // Try to retain
    const sorted = cd.sortedFilenames();
    const filenameList = $('#filename-list');
    filenameList.empty();
    sorted.forEach(filename => filenameList.append(makeFilename(filename)));
    if (sorted.includes(selected)) {
      selectFileInFileList(selected);
    } else {
      selectFileInFileList(sorted[0]);
    }
  };

  const makeFilename = (filename) => {
    const div = $('<div>', {
        class: 'filename',
           id: `radio_${filename}`,
         text: filename
    });
    if (isHighlightFile(filename)) {
      div.addClass('highlight');
    }
    div.click(() => selectFileInFileList(filename));
    return div;
  };

});
</script>

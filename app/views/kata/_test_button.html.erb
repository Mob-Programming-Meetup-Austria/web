
<button type="button" id="test-button">test</button>

<script type="text/javascript">
'use strict';
$(() => {

  const predicted = $('input[name=predicted]');

  cd.testButton = $('#test-button');
  cd.testButton.enable  = () => cd.testButton.attr('disabled', false);
  cd.testButton.disable = () => cd.testButton.attr('disabled', true);

  cd.testButton.click(() => cd.predictTrafficLight(predicted, testButtonClick));

  const testButtonClick = () => {
    // Called from 3 places
    // 1. when you click [test]
    // 2. when you hot-key Alt-T
    // 3. when you checkout from a diff-review
    cd.testButton.disable();
    cd.saveCodeFromSyntaxHighlightEditors();
    cd.waitSpinner.fadeIn('slow', () => {
      const form = cd.testButton.closest('form');
      $.ajax({
           timeout: 30000, // [1]
              type: 'POST',
               url: form.attr('action'),
              data: form.serialize(),
          complete: complete,
             error: error
      });
    });
    // [1] This 30s timeout is different to max_seconds
    // from the start-point's manifest.json file.
    // The main reason this timeout will fire is if
    // the runner service receives a run_cyber_dojo_sh()
    // call with an image_name not (yet) on the receiving
    // node, causing it to do a [docker pull]. Only when
    // the [docker pull] finishes does the [docker run]
    // begin and the max_seconds sleep timer start.
  };

  //- - - - - - - - - - - - - - - - - - - - - - -
  const complete = (_xhr, _status) => {
    cd.waitSpinner.fadeOut('slow', () => {
      predicted.val('none');
      cd.testButton.enable();
    });
  };

  //- - - - - - - - - - - - - - - - - - - - - - -
  const error = (request, status, thrown) => {
    const message = [
      request.responseText,
      '----------------------------',
      `Status=${status}`,
      thrown
    ].join("\n");
    cd.dialogError(message);
  };

});
</script>

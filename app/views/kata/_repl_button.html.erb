<div id="repl-box">
    <div id="repl-terminal-container" ></div>
    <button type="button"
            id="repl-button"
            title="(re)starts the REPL">
       repl
    </button>
</div>

<script type="text/javascript">
'use strict';
$(() => {

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function SocketMonitor(url, terminal) {
    // Watches the websocket we talk to the server with.
    // If it goes down outside of our control it silently re-opens the socket.
    this.socket = null;
    this.start(url, terminal);
  };

  SocketMonitor.prototype.start = function(url, terminal) {
    var that = this;

    this.socket = new WebSocket(url);

    this.socket.onopen = function(_event) {
      console.log('socket opened');
      terminal.attach(that.socket);
      terminal._initialize = true;
    };

    this.socket.onclose = function(event) {
      console.log('socket closed');
      terminal.detach(that.socket);
      const NGINX_TIMEOUT_CODE = 1006;
      if (event.code === NGINX_TIMEOUT_CODE) {
        that.start(url, terminal);
      }
    };

    this.socket.onerror = function(event) {
      terminal.writeln('Error connecting to REPL');
    };
  };

  SocketMonitor.prototype.close = function() {
    this.socket.close(1000, 'User requested new REPL');
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  const createTerminalIn = (cssId) => {
    const terminalContainer = document.getElementById(cssId) ;
    const terminal = new Terminal({
      cursorBlink: true, // optionElements.cursorBlink.checked,
      scrollback: 10, // parseInt(optionElements.scrollback.value, 10),
      tabStopWidth: 10 // parseInt(optionElements.tabstopwidth.value, 10)
    });
    Terminal.applyAddon(attach);
    Terminal.applyAddon(fit);
    Terminal.applyAddon(fullscreen);
    Terminal.applyAddon(search);
    Terminal.applyAddon(winptyCompat);
    $(`#${cssId}`).show();
    terminal.open(terminalContainer);
    terminal.winptyCompatInit();
    terminal.fit();
    terminal.focus();
    return terminal;
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  const id = "<%= @kata.id %>";
  const replUrl = 'http://' + location.hostname + '/repler/' + id;
  const socketUrl = 'ws://' + location.hostname + '/repler_ws/' + id;

  const inGreen = (s) => {
    const greenCode = '\u001b[32m';
    const resetCode = '\u001b[0m';
    return `${greenCode}${s}${resetCode}`;
  };

  const destroyRepl = (_terminal) => {
    // Request that the REPL be terminated.
    // Returns the promise for the DELETE request.
    console.log('destroying repl');
    //terminal.writeln(inGreen('REPL disconnected'));
    return fetch(replUrl, { method: 'DELETE' });
  };

  const createRepl = (terminal) => {
    // Request that a REPL be created.
    // Returns the promise for the POST request.
    terminal.writeln(inGreen('Connecting to REPL'));
    console.log('creating repl');
    cd.saveCodeFromSyntaxHighlightEditors();
    const form = replButton.closest('form');
    const requestParams = {
      method: 'POST',
      body: JSON.stringify(form.serializeArray()),
      headers: { 'content-type': 'application/json' }
    };
    return fetch(replUrl, requestParams);
  };

  const replButton = $("#repl-button");

  // The SocketMonitor for talking with the REPL on the server.
  // TODO: 1. put inside dialog
  // TODO: 2. dialog.close => socket.close
  // TODO: 3. move socket declaration inside replButton click handler
  var socket = null;

  replButton.click(() => {
    const terminal = createTerminalIn('repl-terminal-container');
    if (socket !== null) {
      socket.close();
      socket = null;
    }
    destroyRepl(terminal)
      .then(() => { socket = new SocketMonitor(socketUrl, terminal); })
      .then(() => createRepl(terminal))
      .then(() => terminal.writeln('Ready...'));
  });

  // TODO: How can we arrange for destroyRepl() to be called when the page closes?

});
</script>

<div id="repl-box">
    <div id="repl-terminal-container" ></div>
    <button type="button"
            id="repl-button"
            title="(re)starts the REPL">
       repl
    </button>
</div>

<script type="text/javascript">
'use strict';
$(() => {

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function SocketMonitor(url, terminal) {
    // Watches the websocket we talk to the server with.
    // If it goes down outside of our control it silently re-opens the socket.
    this.socket = null;
    this.start(url, terminal);
  };

  SocketMonitor.prototype.start = function(url, terminal) {
    var that = this;

    this.socket = new WebSocket(url);

    this.socket.onopen = function(event) {
      console.log('socket opened');
      terminal.attach(that.socket);
      terminal._initialize = true;
    };

    this.socket.onclose = function(event) {
      console.log('socket closed');
      terminal.detach(that.socket);
      const NGINX_TIMEOUT_CODE = 1006;
      if (event.code === NGINX_TIMEOUT_CODE) {
        // Restart it silently.
        that.start(url, terminal);
      }
    };

    this.socket.onerror = function(event) {
      terminal.writeln('Error connecting to REPL');
    };
  };

  SocketMonitor.prototype.close = function() {
    this.socket.close(1000, 'User requested new REPL');
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  const createTerminalIn = (cssId) => {
    const terminalContainer = document.getElementById(cssId) ;
    const term = new Terminal({
      cursorBlink: true, // optionElements.cursorBlink.checked,
      scrollback: 10, // parseInt(optionElements.scrollback.value, 10),
      tabStopWidth: 10 // parseInt(optionElements.tabstopwidth.value, 10)
    });
    Terminal.applyAddon(attach);
    Terminal.applyAddon(fit);
    Terminal.applyAddon(fullscreen);
    Terminal.applyAddon(search);
    Terminal.applyAddon(winptyCompat);
    $(`#${cssId}`).show();
    term.open(terminalContainer);
    term.winptyCompatInit();
    term.fit();
    term.focus();
    return term;
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  const avatarName = 'lion'; // TODO: DROP
  const kataId = "<%= @kata.id %>";
  const urlId = kataId + '/' + avatarName;
  const replURL = 'http://' + location.hostname + '/repl/' + urlId;
  const socketURL = 'ws://' + location.hostname + '/repl_ws/' + urlId;

  const destroyRepl = () => {
    // Request that the REPL be terminated.
    // Returns the promise for the DELETE request.
    console.log('destroying repl');
    //term.writeln('\n\r\033[31mREPL disconnected\033[0m'); // [1]
    //term.writeln('REPL disconnected');
    return fetch(replURL, { method: 'DELETE' });
  };

  const createRepl = (term) => {
    // Request that a REPL be created.
    // Returns the promise for the POST request.
    const form = replButton.closest('form');
    const requestParams = {
      method: 'POST',
      body: JSON.stringify(form.serializeArray()),
      headers: { 'content-type': 'application/json' }
    };
    //term.writeln('\033[32mConnecting to REPL\033[0m'); // [1]
    term.writeln('Connecting to REPL');
    console.log('creating repl');
    cd.saveCodeFromSyntaxHighlightEditors();
    return fetch(replURL, requestParams);
  };

  // [1]
  //SyntaxError: "0"-prefixed octal literals and octal escape sequences are deprecated; for octal literals use the "0o" prefix instead
  const replButton = $("#repl-button");

  // The SocketMonitor for talking with the REPL on the server.
  var socket = null;

  replButton.click(() => {
    const term = createTerminalIn('repl-terminal-container');
    if (socket !== null) {
      socket.close();
      socket = null;
    }
    destroyRepl()
      .then(() => createRepl(term))
      .then(() => { socket = new SocketMonitor(socketURL, term); })
      .then(() => term.writeln('Ready...'));
  });

  // TODO: How can we arrange for destroyRepl() to be called when the page closes?

});
</script>

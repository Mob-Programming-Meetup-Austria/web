<script type="text/javascript"><!--
'use strict';
$(() => {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // There are two sequences of traffic-lights:
  // o) kata-page traffic-lights live under #traffic-lights.
  //    Click any of these to open the diff-review
  // o) review-page traffic-lights live under #review-traffic-lights.
  //    Click any of these to move to it in the diff-review.
  // The first of these are controlled here.
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  const version = '<%= @version %>';
  const id = '<%= @id %>';
  const groupId = '<%= @group_id %>';
  const avatarName = '<%= @avatar_name %>';
  const avatarIndex = '<%= @avatar_index %>';

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // The index of most-recent (rightmost) traffic-light
  // is updated in the browser and sent back to the web
  // service (on [test] click) so the web service does not
  // not need to retrieve it from saver).

  const wasIndex = (value) => {
    const inputIndex = $("input[name='index']");
    if (value === undefined) {
      return parseInt(inputIndex.val());
    } else {
      inputIndex.val(value);
    }
  };

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // cd.appendTrafficLight() sets up the tip/click handlers
  // for the kata-page (but not review-page) traffic-lights.
  // It is called in two places:
  //   1) From this file
  //      - This happens when a page loads.
  //      - It sets up the existing traffic-lights.
  //   2) From run_tests.js.erb
  //      - This happens when you run the [test]s
  //      - It sets up the new traffic-light.
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  const $lights = $('#traffic-lights');

  cd.appendTrafficLight = (event) => {
    const colour = event.colour;
    const index = event.index;
    if (colour) {
      const $div = $('<div>', {
        'class':'diff-traffic-light',
        'data-id':id,
        'data-index':index,
        'data-avatar-index':avatarIndex,
        'data-colour':colour
      });
      const predicted = event.predicted || 'none';
      const imgSuffix = isRag(colour) ? `_predicted_${predicted}` : '';
      const $img = $('<img>', {
        'src':`/traffic-light/image/${colour}${imgSuffix}.png`,
        'alt':`${colour} traffic-light`
      });
      const $light = $div.append($img);
      $lights.append($light);
      $light.click(() => cd.setReviewData(version, id, groupId, avatarName, avatarIndex, index-1, index));
      cd.setupTrafficLightTip($light, version, id, avatarIndex, index-1, index);
      updateCountData(event);
    }
    wasIndex(index);
  };

  const updateCountData = (event) => {
    const colour = event.colour;
    const predicted = event.predicted;
    counts[colour] += 1;
    counts.lastEvent = event;
    // Don't count timed_out or faulty as incorrect predictions.
    if (predicted && predicted != 'none' && isRag(colour)) {
      if (colour === predicted) {
        counts.hit += 1;
      } else {
        counts.miss += 1;
      }
    }
  };

  const counts = {
    red:0,
    amber:0,
    green:0,
    timed_out:0,
    faulty: 0,
    hit:0,
    miss:0,
  };

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // cd.updateTrafficLightsCount() updates the total and predicted counts.
  // It is called from two places:
  //   1) kata/edit when page loads/refreshes.
  //   2) run_tests.js.erb when [test] is clicked.

  cd.updateTrafficLightsCount = () => {
    updateTrafficLightsTotalCount();
    if (cd.predictOn()) {
      updateTrafficLightsPredictCount();
    }
  };

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  const countTotalBox = $('#traffic-lights-count-total-box');

  const updateTrafficLightsTotalCount = () => {
    const box = countTotalBox;
    box.fadeOut('fast', () => {
      box.empty().append(totalCount());
      cd.setupHoverTips($('.traffic-light-count'));
      box.fadeIn('fast');
    });
  };

  const totalCount = () => {
    const total = counts.red + counts.amber + counts.green + counts.timed_out;
    return $('<div>', {
      'class': `traffic-light-count ${lastEventColour()}`,
      'data-tip': 'traffic_light_count',
      'data-red-count': counts.red,
      'data-amber-count': counts.amber,
      'data-green-count': counts.green,
      'data-timed-out-count': counts.timed_out
    }).text(total);
  };

  const lastEventColour = () => {
    const last = counts.lastEvent;
    return last ? last.colour : '';
  };

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Visibility of the predict-box is controlled from the
  // [predict?] button handler.

  cd.countPredictBox = () => $('#traffic-lights-count-predict-box');

  const updateTrafficLightsPredictCount = () => {
    const box = cd.countPredictBox();
    box.fadeOut('fast', () => {
      box.empty().append(missBox()).append(hitBox());
      // TODO set hover-tips
      box.fadeIn('fast');
    });
  };

  const hitBox = () => {
    const imgColour = lastEventPredictedCorrectly() ? counts.lastEvent.colour : 'black';
    const $hitImg = $('<img>', {
      'id':'hit-img',
      'src':`/traffic-light/image/circle-hit-${imgColour}.png`
    });
    const $hitCount = $('<div>', { id:'hit-count' }).text(counts.hit);
    return $('<div>', {'id':'hit-box'}).append($hitImg).append($hitCount);
  };

  const missBox = () => {
    const imgColour = lastEventPredictedIncorrectly() ? counts.lastEvent.predicted : 'black';
    const $missImg = $('<img>', {
      'id':'miss-img',
      'src':`/traffic-light/image/circle-miss-${imgColour}.png`
    });
    const $missCount = $('<div>', { id:'miss-count'}).text(counts.miss);
    return $('<div>', {'id':'miss-box'}).append($missImg).append($missCount);
  };

  const lastEventPredictedCorrectly = () => {
    const last = counts.lastEvent;
    return last && last.predicted && last.predicted == last.colour;
  };

  const lastEventPredictedIncorrectly = () => {
    const last = counts.lastEvent;
    return last && last.predicted != 'none' && last.predicted != last.colour;
  };

  const isRag = (s) => ['red','amber','green'].includes(s);

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  const events = <%= raw @events_json.gsub("\n",'') %>;
  events.forEach((event,index) => {
    event.index = index; // version 0 events don't store their index
    cd.appendTrafficLight(event);
  });

});
//--></script>

<input type="hidden" name="index" value="0">

<div id="traffic-lights"></div>

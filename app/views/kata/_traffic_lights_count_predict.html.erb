<script type="text/javascript">
'use strict';
$(() => {

  cd.predict = {
    reset:() => {
      const predict = cd.settings.predict();
      if (predict === 'on') {
        cd.updateTrafficLightsCount();
        cd.countPredictBox().show();
      }
      if (predict === 'off') {
        cd.countPredictBox().hide();
      }
    }
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  cd.predictTrafficLight = (input, handler) => {
    // Called from the test-button handler
    if (cd.settings.predict() === 'on') {
      openPredictionDialog(input, handler);
    } else {
      handler();
    }
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const openPredictionDialog = (input, handler) => {
    let html = '';
    html += '<div>'
    html += '<table>';
    html += tr2('red',     redBlurb());
    html += tr2('amber', amberBlurb());
    html += tr2('green', greenBlurb());
    html += '</table>';
    html += '</div>';
    const node = $(html);
    setupRagClick(input, node, handler, 'red');
    setupRagClick(input, node, handler, 'amber');
    setupRagClick(input, node, handler, 'green');
    setupBlurbClick(input, node, handler, 'red');
    setupBlurbClick(input, node, handler, 'amber');
    setupBlurbClick(input, node, handler, 'green');
    const originator = cd.testButton;
    const xPos = originator.offset().left + originator.width() + 21;
    const yPos = originator.offset().top;
    node.dialog({
              width: 300,
           position: [xPos,yPos],
           autoOpen: true,
      closeOnEscape: true,
              modal: true,
              title: cd.dialogTitle('predict'),
        beforeClose: event => {
          if (event.keyCode === $.ui.keyCode.ESCAPE) {
            node.remove();
            return true;
          }
        }
    });
  };

  const setupRagClick = (input, node, handler, colour) => {
    $(`div#predict-${colour}`, node).click(() => {
      input.val(colour);
      node.remove();
      handler();
    });
  };

  const setupBlurbClick = (input, node, handler, colour) => {
    $(`.predict-blurb.${colour}`, node).click(() => {
      input.val(colour);
      node.remove();
      handler();
    });
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const redBlurb   = () => blurb('red',   'some tests will fail');
  const amberBlurb = () => blurb('amber', 'the tests wont run yet');
  const greenBlurb = () => blurb('green', 'all the tests will pass');

  const blurb = (colour, text) => `<div class="predict-blurb ${colour}">${text}</div>`;

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const tr2 = (rag, s) => `<tr><td>${lightImg(rag)}</td><td>${s}</td></tr>`;

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  // kata.scss provides background image with custom :hover
  const lightImg = (rag) => `<div class="predict" id="predict-${rag}"></div>`;

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  return cd;

});
</script>

<div id="traffic-lights-count-predict-box"></div>

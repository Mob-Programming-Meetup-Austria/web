<script type="text/javascript"><!--
'use strict';
$(() => {

  let predict = undefined; // 'on'|'off'

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  cd.predictIsOn = () => predict === 'on';

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  cd.setupPredictButton = (value) => {
    // Called from kata/edit to make the button visible.
    cd.predictButton().show();
    // Restore the default|previous state
    predict = value;
    switch (predict) {
      case 'on' :
        setPredictOn();
        cd.predictButton().clickToggle(setPredictOff, setPredictOn);
        break;
      case 'off':
        setPredictOff();
        cd.predictButton().clickToggle(setPredictOn, setPredictOff);
        break;
    }
  };

  const setPredictOn = () => {
    // [1] Must be first because cd.updateTrafficLightsCount()
    // checks if predict is on.
    // [2] Consider of the following scenario:
    //   o) predict? is on and you predict green (say) correctly
    //   o) you turn predict? off
    //   o) you [test] and get a red (say) traffic-light
    //   o) you turn predict? on
    // In this case there was no prediction on the
    // most recent traffic-light.
    setPredict('on'); // [1]
    cd.updateTrafficLightsCount(); // [2]
    cd.countPredictBox().show();
  };

  const setPredictOff = () => {
    setPredict('off');
    cd.countPredictBox().hide();
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const setPredict = (value) => {
    // Called from the predict-option dialog before [test] as POSTed.
    predict = value;
    $.post('/kata/set_predict', { id:cd.kataId(), value:predict });
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  cd.predictTrafficLight = (input, handler) => {
    // Called from the test-button handler
    if (cd.predictIsOn()) {
      openPredictionDialog(input, handler);
    } else {
      handler();
    }
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const openPredictionDialog = (input, handler) => {
    let html = '';
    html += '<div>'
    html += '<table>';
    html += tr2('red',     redBlurb());
    html += tr2('amber', amberBlurb());
    html += tr2('green', greenBlurb());
    html += '</table>';
    html += '</div>';
    const node = $(html);
    setupRagClick(input, node, handler, 'red');
    setupRagClick(input, node, handler, 'amber');
    setupRagClick(input, node, handler, 'green');
    node.dialog({
              width: 300,
           autoOpen: true,
      closeOnEscape: true,
              modal: true,
              title: cd.dialogTitle('predict!'),
            buttons: { close: () => {
                node.remove();
              }
            },
        beforeClose: event => {
          if (event.keyCode === $.ui.keyCode.ESCAPE) {
            node.remove();
            return true;
          }
        }
    });
  };

  const setupRagClick = (input,node,handler,colour) => {
    $(`div#predict-${colour}`,node).click(() => {
      input.val(colour);
      node.remove();
      handler();
    });
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const redBlurb = () => blurb('some tests will fail');
  const amberBlurb = () => blurb('the tests wont run yet');
  const greenBlurb = () => blurb('all the tests will pass');
  const blurb = (s) => `<div class="predict-blurb">${s}</div>`;

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  const tr2 = (rag, s) => `<tr><td>${lightImg(rag)}</td><td>${s}</td></tr>`;

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  // kata.scss provides background image with custom :hover
  const lightImg = (rag) => `<div class="predict" id="predict-${rag}"></div>`;

  //- - - - - - - - - - - - - - - - - - - - - - - - -
  return cd;

});
//--></script>

<div id="traffic-lights-count-predict-box"></div>

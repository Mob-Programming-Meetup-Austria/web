
<div id="repl-terminal"></div>

<script type="text/javascript">
'use strict';
$(() => {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Notes
  // 1. The repl and web-socket Urls have a random suffix.
  // If the repl docker container's id was based *only* on the kata-id,
  // then creating a new repl could  fail if there was a very recent
  // [resume], which caused a repl DELETE request, but the docker daemon
  // had not yet actually deleted the repl container.
  // P.S. I tried to put a Terminal inside a jQuery dialog. I failed.
  // Some gnarly CSS z-Index issues I think.

  //const kataPage = $('#kata-page');
  //const replPage = $('#repl-page');

  cd.closeRepl = () => {};

  cd.openRepl = () => {
    const element = document.getElementById('repl-terminal');
    const terminal = createTerminalIn(element);
    const kataId = "<%= @kata.id %>";
    const sid = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0,6);
    const route = `${location.hostname}/repler/${kataId}-${sid}`;
    const repl = new Repl(`http://${route}`, terminal);
    const socket = new WebSocketMonitor(`ws://${route}`, terminal);
    //const resumeButton = $('.resume-button', replPage);
    cd.saveCodeFromSyntaxHighlightEditors();
    repl.create().then(() => socket.open());
    cd.closeRepl = () => {
      repl.delete().then(() => socket.close());
      $(element).empty(); // Ready for next time.
    };
    //resumeButton.click(() => closeReplPage(element, terminal, repl, socket));
  };

  /*cd.closeReplPage = (element, terminal, repl, socket) => {
    terminal.writeln('');
    repl.delete().then(() => socket.close());
    replPage.fadeOut('slow', () => {
      kataPage.fadeIn('slow', () => {
        $(element).empty(); // Ready for next time.
      });
    });
  };*/

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  function WebSocketMonitor(url, terminal) {
    this.url = url;
    this.terminal = terminal;
  };

  WebSocketMonitor.prototype.open = function() {
    const that = this;
    this.socket = new WebSocket(this.url);
    this.socket.onopen = function(_event) {
      that.terminal.greenWriteln('Opening WebSocket');
      that.terminal.attach(that.socket);
      that.terminal._initialize = true;
    };
    this.socket.onclose = function(event) {
      const NGINX_TIMEOUT_CODE = 1006;
      if (event.code === NGINX_TIMEOUT_CODE) {
        that.terminal.greenWriteLn('WebSocket timed out');
        that.start(); // silently restart
      }
    };
    this.socket.onerror = function(event) {
      this.terminal.greenWriteln('WebSocket error');
    };
  };

  WebSocketMonitor.prototype.close = function() {
    this.terminal.greenWriteln('Closing WebSocket');
    this.terminal.detach(this.socket);
    this.socket.close(1000, 'User closed the WebSocket');
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  const createTerminalIn = (element) => {
    const terminal = new Terminal({
      cursorBlink: true,
      scrollback: 10,
      tabStopWidth: 10
    });
    const addOns = [attach,fit,fullscreen,search,winptyCompat];
    addOns.forEach(addOn => Terminal.applyAddon(addOn));
    terminal.open(element);
    terminal.winptyCompatInit();
    terminal.fit();
    terminal.focus();
    terminal.greenWriteln = (s) => {
      const greenCode = '\u001b[32m';
      const resetCode = '\u001b[0m';
      terminal.writeln(`${greenCode}${s}${resetCode}`);
      console.log(s);
    };
    return terminal;
  };

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  function Repl(url, terminal) {
    this.url = url;
    this.terminal = terminal;
  };

  Repl.prototype.create = function() {
    this.terminal.greenWriteln('Creating REPL');
    return fetch(this.url, {
      method: 'POST',
      body: JSON.stringify($('form').serializeArray()),
      headers: { 'content-type': 'application/json' }
    });
  };

  Repl.prototype.delete = function() {
    this.terminal.greenWriteln('Deleting REPL');
    return fetch(this.url, { method: 'DELETE' });
  };

});
</script>
